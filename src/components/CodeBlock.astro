---
export interface Props {
  code: string;
  language?: string;
  title?: string;
  showLineNumbers?: boolean;
}

const { code, language = "text", title, showLineNumbers = true } = Astro.props;

// 处理代码，为每行添加行号
function addLineNumbers(codeString: string) {
  const lines = codeString.split("\n");
  return lines.map((line, index) => ({
    number: index + 1,
    content: line,
  }));
}

const codeLines = showLineNumbers ? addLineNumbers(code) : null;
---

<div class="code-block industrial-border">
  <div class="code-content">
    {
      showLineNumbers ? (
        <div class="code-with-lines">
          <div class="line-numbers">
            {codeLines?.map((line) => (
              <span class="line-number">{line.number}</span>
            ))}
          </div>
          <div class="code-lines">
            <pre class={`language-${language}`}>
              <code>
                {codeLines?.map((line) => (
                  <span class="code-line">{line.content}</span>
                ))}
              </code>
            </pre>
          </div>
        </div>
      ) : (
        <pre class={`language-${language}`}>
          <code set:html={code} />
        </pre>
      )
    }
  </div>
</div>

<style>
  .code-block {
    margin: 1.5rem 0;
    overflow: hidden;
    background-color: var(--color-code-bg);
    position: relative;
  }

  .code-content {
    position: relative;
  }

  .code-with-lines {
    display: flex;
  }

  .line-numbers {
    background-color: rgba(0, 0, 0, 0.05);
    border-right: var(--border-width) var(--border-style) var(--color-border);
    padding: 1rem 0.75rem;
    user-select: none;
    min-width: 3rem;
    text-align: right;
  }

  .line-number {
    display: block;
    font-family: var(--font-mono);
    font-size: 0.875rem;
    color: var(--color-muted);
    line-height: 1.5;
    font-weight: 400;
  }

  .code-lines {
    flex: 1;
    overflow-x: auto;
  }

  .code-lines pre {
    margin: 0;
    padding: 1rem;
    background: none;
    border: none;
  }

  .code-line {
    display: block;
    line-height: 1.5;
  }

  .code-content pre {
    margin: 0;
    padding: 1.5rem;
    background: none;
    overflow-x: auto;
    border: none;
  }

  /* Syntax highlighting styles */
  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    color: #6c757d;
  }

  .token.punctuation {
    color: #6f42c1;
  }

  .token.property,
  .token.tag,
  .token.boolean,
  .token.number,
  .token.constant,
  .token.symbol,
  .token.deleted {
    color: #d73a49;
  }

  .token.selector,
  .token.attr-name,
  .token.string,
  .token.char,
  .token.builtin,
  .token.inserted {
    color: #28a745;
  }

  .token.operator,
  .token.entity,
  .token.url,
  .language-css .token.string,
  .style .token.string {
    color: var(--color-accent);
  }

  .token.atrule,
  .token.attr-value,
  .token.keyword {
    color: #007bff;
  }

  .token.function,
  .token.class-name {
    color: #6f42c1;
  }

  .token.regex,
  .token.important,
  .token.variable {
    color: #e83e8c;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .line-numbers {
      min-width: 2.5rem;
      padding: 1rem 0.5rem;
    }

    .code-lines pre {
      padding: 1rem 0.75rem;
    }

    .code-content {
      display: flex;
      flex-direction: column;
    }
  }
</style>
