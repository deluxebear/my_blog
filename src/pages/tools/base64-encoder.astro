---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
---

<Layout title="BASE64ÁºñËß£Á†ÅÂ∑•ÂÖ∑ - Êï∞Â≠óËä±Âõ≠" description="BASE64ÁºñÁ†ÅÂíåËß£Á†ÅÂ∑•ÂÖ∑ÔºåÊîØÊåÅÊñáÊú¨ÁºñËß£Á†Å„ÄÅÊñá‰ª∂ÊîØÊåÅ„ÄÅÊâπÈáèÂ§ÑÁêÜÂíåÊ†ºÂºèÈ™åËØÅ">
  <Header />
  
  <main class="main">
    <div class="container">
      <header class="page-header">
        <h1 class="page-title">BASE64ÁºñËß£Á†ÅÂ∑•ÂÖ∑</h1>
        <p class="page-description">
          ‰∏ì‰∏öÁöÑBASE64ÁºñÁ†ÅÂíåËß£Á†ÅÂ∑•ÂÖ∑ÔºåÊîØÊåÅÊñáÊú¨„ÄÅÊñá‰ª∂„ÄÅÊâπÈáèÂ§ÑÁêÜÂíåÊ†ºÂºèÈ™åËØÅ
        </p>
      </header>

      <!-- BASE64ÁºñËß£Á†Å‰∏ªÁïåÈù¢ -->
      <section class="encoder-section">
        <div class="encoder-card industrial-border">
          <!-- Êìç‰ΩúÊ®°ÂºèÈÄâÊã© -->
          <div class="mode-selector">
            <div class="mode-tabs">
              <button class="mode-tab active" data-mode="text" id="text-mode-tab">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14,2 14,8 20,8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10,9 9,9 8,9"></polyline>
                </svg>
                ÊñáÊú¨ÁºñËß£Á†Å
              </button>
              <button class="mode-tab" data-mode="file" id="file-mode-tab">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                  <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path>
                  <polyline points="13,2 13,9 20,9"></polyline>
                </svg>
                Êñá‰ª∂ÁºñËß£Á†Å
              </button>
              <button class="mode-tab" data-mode="batch" id="batch-mode-tab">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                  <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                  <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                  <path d="M9 14l2 2 4-4"></path>
                </svg>
                ÊâπÈáèÂ§ÑÁêÜ
              </button>
            </div>
          </div>

          <!-- ÊñáÊú¨ÁºñËß£Á†ÅÊ®°Âºè -->
          <div class="processing-mode" id="text-mode">
            <div class="input-section">
              <div class="input-group">
                <label for="text-input" class="input-label">ËæìÂÖ•ÊñáÊú¨:</label>
                <textarea 
                  id="text-input" 
                  class="text-textarea" 
                  placeholder="ËØ∑ËæìÂÖ•ÈúÄË¶ÅÁºñÁ†ÅÊàñËß£Á†ÅÁöÑÊñáÊú¨..."
                  rows="6"
                ></textarea>
                <div class="input-info">
                  <span class="char-count" id="text-char-count">0 Â≠óÁ¨¶</span>
                  <span class="encoding-info" id="text-encoding-info">UTF-8</span>
                </div>
              </div>

              <div class="action-buttons">
                <button class="action-btn encode-btn" id="text-encode-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="16,18 22,12 16,6"></polyline>
                    <polyline points="8,6 2,12 8,18"></polyline>
                  </svg>
                  BASE64ÁºñÁ†Å
                </button>
                <button class="action-btn decode-btn" id="text-decode-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="8,18 2,12 8,6"></polyline>
                    <polyline points="16,6 22,12 16,18"></polyline>
                  </svg>
                  BASE64Ëß£Á†Å
                </button>
                <button class="action-btn clear-btn" id="text-clear-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="3,6 5,6 21,6"></polyline>
                    <path d="M19,6v14a2,2 0,0 1,-2,2H7a2,2 0,0 1,-2,-2V6m3,0V4a2,2 0,0 1,2,-2h4a2,2 0,0 1,2,2v2"></path>
                  </svg>
                  Ê∏ÖÁ©∫
                </button>
              </div>
            </div>

            <div class="output-section">
              <div class="output-group">
                <label for="text-output" class="output-label">
                  Â§ÑÁêÜÁªìÊûú:
                  <button class="copy-result-btn" id="copy-text-result-btn" title="Â§çÂà∂ÁªìÊûú">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
                  </button>
                </label>
                <textarea 
                  id="text-output" 
                  class="text-textarea output-textarea" 
                  placeholder="Â§ÑÁêÜÁªìÊûúÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå..."
                  rows="6"
                  readonly
                ></textarea>
                <div class="output-info">
                  <span class="char-count" id="text-output-char-count">0 Â≠óÁ¨¶</span>
                  <span class="validation-status" id="text-validation-status"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Êñá‰ª∂ÁºñËß£Á†ÅÊ®°Âºè -->
          <div class="processing-mode hidden" id="file-mode">
            <div class="file-input-section">
              <div class="file-upload-area" id="file-upload-area">
                <div class="upload-icon">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7,10 12,15 17,10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                  </svg>
                </div>
                <div class="upload-text">
                  <p class="upload-title">ÁÇπÂáªÈÄâÊã©Êñá‰ª∂ÊàñÊãñÊãΩÊñá‰ª∂Âà∞Ê≠§Â§Ñ</p>
                  <p class="upload-subtitle">ÊîØÊåÅÊâÄÊúâÊñá‰ª∂Á±ªÂûãÔºåÊúÄÂ§ß 10MB</p>
                </div>
                <input type="file" id="file-input" class="file-input" />
              </div>

              <div class="file-info hidden" id="file-info">
                <div class="file-details">
                  <div class="file-icon">üìÑ</div>
                  <div class="file-meta">
                    <div class="file-name" id="file-name"></div>
                    <div class="file-size" id="file-size"></div>
                    <div class="file-type" id="file-type"></div>
                  </div>
                  <button class="remove-file-btn" id="remove-file-btn" title="ÁßªÈô§Êñá‰ª∂">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                      <line x1="18" y1="6" x2="6" y2="18"></line>
                      <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                  </button>
                </div>
              </div>

              <div class="file-actions">
                <button class="action-btn encode-btn" id="file-encode-btn" disabled>
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="16,18 22,12 16,6"></polyline>
                    <polyline points="8,6 2,12 8,18"></polyline>
                  </svg>
                  ÁºñÁ†ÅÊñá‰ª∂
                </button>
                <button class="action-btn decode-btn" id="file-decode-btn" disabled>
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="8,18 2,12 8,6"></polyline>
                    <polyline points="16,6 22,12 16,18"></polyline>
                  </svg>
                  Ëß£Á†ÅÊñá‰ª∂
                </button>
              </div>
            </div>

            <div class="file-output-section">
              <div class="output-group">
                <label for="file-output" class="output-label">
                  Êñá‰ª∂Â§ÑÁêÜÁªìÊûú:
                  <div class="file-output-actions">
                    <button class="copy-result-btn" id="copy-file-result-btn" title="Â§çÂà∂ÁªìÊûú">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                      </svg>
                    </button>
                    <button class="download-result-btn" id="download-result-btn" title="‰∏ãËΩΩÁªìÊûú">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="7,10 12,15 17,10"></polyline>
                        <line x1="12" y1="15" x2="12" y2="3"></line>
                      </svg>
                    </button>
                  </div>
                </label>
                <textarea 
                  id="file-output" 
                  class="text-textarea output-textarea file-output-textarea" 
                  placeholder="Êñá‰ª∂Â§ÑÁêÜÁªìÊûúÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå..."
                  rows="10"
                  readonly
                ></textarea>
                <div class="output-info">
                  <span class="char-count" id="file-output-char-count">0 Â≠óÁ¨¶</span>
                  <span class="validation-status" id="file-validation-status"></span>
                </div>
              </div>
            </div>
          </div>

          <!-- ÊâπÈáèÂ§ÑÁêÜÊ®°Âºè -->
          <div class="processing-mode hidden" id="batch-mode">
            <div class="batch-input-section">
              <div class="input-group">
                <label for="batch-input" class="input-label">ÊâπÈáèËæìÂÖ• (ÊØèË°å‰∏Ä‰∏™ÊñáÊú¨):</label>
                <textarea 
                  id="batch-input" 
                  class="text-textarea batch-textarea" 
                  placeholder="ËØ∑ËæìÂÖ•Â§ö‰∏™ÊñáÊú¨ÔºåÊØèË°å‰∏Ä‰∏™..."
                  rows="8"
                ></textarea>
                <div class="batch-info">
                  <span class="line-count" id="batch-line-count">0 Ë°å</span>
                  <span class="valid-count" id="batch-valid-count">0 ‰∏™ÊúâÊïàÈ°π</span>
                </div>
              </div>

              <div class="batch-actions">
                <button class="action-btn batch-encode-btn" id="batch-encode-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="16,18 22,12 16,6"></polyline>
                    <polyline points="8,6 2,12 8,18"></polyline>
                  </svg>
                  ÊâπÈáèÁºñÁ†Å
                </button>
                <button class="action-btn batch-decode-btn" id="batch-decode-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="8,18 2,12 8,6"></polyline>
                    <polyline points="16,6 22,12 16,18"></polyline>
                  </svg>
                  ÊâπÈáèËß£Á†Å
                </button>
                <button class="action-btn clear-batch-btn" id="clear-batch-btn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="3,6 5,6 21,6"></polyline>
                    <path d="M19,6v14a2,2 0,0 1,-2,2H7a2,2 0,0 1,-2,-2V6m3,0V4a2,2 0,0 1,2,-2h4a2,2 0,0 1,2,2v2"></path>
                  </svg>
                  Ê∏ÖÁ©∫
                </button>
              </div>
            </div>

            <div class="batch-output-section">
              <div class="output-group">
                <label for="batch-output" class="output-label">
                  ÊâπÈáèÂ§ÑÁêÜÁªìÊûú:
                  <button class="copy-batch-btn" id="copy-batch-btn" title="Â§çÂà∂ÊâÄÊúâÁªìÊûú">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
                  </button>
                </label>
                <textarea 
                  id="batch-output" 
                  class="text-textarea batch-textarea output-textarea" 
                  placeholder="ÊâπÈáèÂ§ÑÁêÜÁªìÊûúÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå..."
                  rows="8"
                  readonly
                ></textarea>
                <div class="batch-result-info">
                  <span class="processed-count" id="processed-count">Â∑≤Â§ÑÁêÜ: 0</span>
                  <span class="success-count" id="success-count">ÊàêÂäü: 0</span>
                  <span class="error-count" id="error-count">Â§±Ë¥•: 0</span>
                </div>
              </div>
            </div>
          </div>

          <!-- ÁºñÁ†ÅÈÄâÈ°π -->
          <div class="encoding-options">
            <h3 class="options-title">ÁºñÁ†ÅÈÄâÈ°π</h3>
            <div class="options-grid">
              <label class="option-item">
                <input type="checkbox" id="url-safe-base64" />
                <span class="option-text">URLÂÆâÂÖ®ÁºñÁ†Å</span>
                <span class="option-desc">‰ΩøÁî® - Âíå _ ÊõøÊç¢ + Âíå /</span>
              </label>
              <label class="option-item">
                <input type="checkbox" id="remove-padding" />
                <span class="option-text">ÁßªÈô§Â°´ÂÖÖÂ≠óÁ¨¶</span>
                <span class="option-desc">ÁßªÈô§ÁªìÂ∞æÁöÑ = Â≠óÁ¨¶</span>
              </label>
              <label class="option-item">
                <input type="checkbox" id="line-breaks" />
                <span class="option-text">Ê∑ªÂä†Êç¢Ë°åÁ¨¶</span>
                <span class="option-desc">ÊØè76‰∏™Â≠óÁ¨¶Ê∑ªÂä†Êç¢Ë°å</span>
              </label>
            </div>
          </div>
        </div>
      </section>

      <!-- Â∏∏Áî®Á§∫‰æã -->
      <section class="examples-section">
        <div class="examples-content industrial-border">
          <h2 class="examples-title">Â∏∏Áî®Á§∫‰æã</h2>
          <div class="examples-grid">
            <div class="example-item">
              <h3 class="example-title">‰∏≠ÊñáÊñáÊú¨ÁºñÁ†Å</h3>
              <div class="example-demo">
                <div class="example-input">
                  <strong>ÂéüÂßã:</strong> ‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ
                </div>
                <div class="example-output">
                  <strong>ÁºñÁ†Å:</strong> 5L2g5aW977yM5LiW55WM77yB
                </div>
              </div>
              <button class="try-example-btn" data-input="‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ">ËØïËØïËøô‰∏™</button>
            </div>

            <div class="example-item">
              <h3 class="example-title">JSONÊï∞ÊçÆÁºñÁ†Å</h3>
              <div class="example-demo">
                <div class="example-input">
                  <strong>ÂéüÂßã:</strong> {"name":"Âº†‰∏â","age":25}
                </div>
                <div class="example-output">
                  <strong>ÁºñÁ†Å:</strong> eyJuYW1lIjoi5byg5LiJIiwiYWdlIjoyNX0=
                </div>
              </div>
              <button class="try-example-btn" data-input='{"name":"Âº†‰∏â","age":25}'>ËØïËØïËøô‰∏™</button>
            </div>

            <div class="example-item">
              <h3 class="example-title">URLÁºñÁ†ÅÁ§∫‰æã</h3>
              <div class="example-demo">
                <div class="example-input">
                  <strong>ÂéüÂßã:</strong> https://example.com/api?q=ÊµãËØï
                </div>
                <div class="example-output">
                  <strong>ÁºñÁ†Å:</strong> aHR0cHM6Ly9leGFtcGxlLmNvbS9hcGk_cT3mtYvor5U=
                </div>
              </div>
              <button class="try-example-btn" data-input="https://example.com/api?q=ÊµãËØï">ËØïËØïËøô‰∏™</button>
            </div>
          </div>
        </div>
      </section>

      <!-- ÂäüËÉΩËØ¥Êòé */
      <section class="features-section">
        <div class="features-content industrial-border">
          <h2 class="features-title">ÂäüËÉΩÁâπÁÇπ</h2>
          <div class="features-grid">
            <div class="feature-item">
              <div class="feature-icon">üìù</div>
              <h3>ÊñáÊú¨ÁºñËß£Á†Å</h3>
              <p>ÊîØÊåÅ‰ªªÊÑèÊñáÊú¨ÁöÑBASE64ÁºñÁ†ÅÂíåËß£Á†ÅÔºåÂÆåÁæéÂ§ÑÁêÜ‰∏≠ÊñáÂ≠óÁ¨¶</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">üìÅ</div>
              <h3>Êñá‰ª∂ÊîØÊåÅ</h3>
              <p>ÊîØÊåÅ‰ªªÊÑèÊñá‰ª∂Á±ªÂûãÁöÑÁºñËß£Á†ÅÔºåÂåÖÊã¨ÂõæÁâá„ÄÅÊñáÊ°£„ÄÅÈü≥È¢ëÁ≠â</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">üìã</div>
              <h3>ÊâπÈáèÂ§ÑÁêÜ</h3>
              <p>ÊîØÊåÅÊâπÈáèÂ§ÑÁêÜÂ§ö‰∏™ÊñáÊú¨ÔºåÊèêÈ´òÂ∑•‰ΩúÊïàÁéá</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">‚úÖ</div>
              <h3>Ê†ºÂºèÈ™åËØÅ</h3>
              <p>Ëá™Âä®È™åËØÅBASE64Ê†ºÂºèÔºåËØÜÂà´ÊúâÊïàÂíåÊó†ÊïàÁöÑÁºñÁ†Å</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">üîß</div>
              <h3>Â§öÁßçÈÄâÈ°π</h3>
              <p>ÊîØÊåÅURLÂÆâÂÖ®ÁºñÁ†Å„ÄÅÁßªÈô§Â°´ÂÖÖ„ÄÅÊ∑ªÂä†Êç¢Ë°åÁ≠âÈÄâÈ°π</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">üîí</div>
              <h3>Êú¨Âú∞Â§ÑÁêÜ</h3>
              <p>ÊâÄÊúâÂ§ÑÁêÜÂú®Êú¨Âú∞ÂÆåÊàêÔºå‰øùÊä§‰Ω†ÁöÑÊï∞ÊçÆÈöêÁßÅ</p>
            </div>
          </div>
        </div>
      </section>

      <!-- ‰ΩøÁî®ËØ¥Êòé -->
      <section class="usage-section">
        <div class="usage-content industrial-border">
          <h2 class="usage-title">‰ΩøÁî®ËØ¥Êòé</h2>
          <div class="usage-list">
            <div class="usage-item">
              <strong>BASE64ÁºñÁ†Å:</strong> Â∞Ü‰ªªÊÑèÊï∞ÊçÆËΩ¨Êç¢‰∏∫BASE64Ê†ºÂºèÔºåÂ∏∏Áî®‰∫éÊï∞ÊçÆ‰º†ËæìÂíåÂ≠òÂÇ®„ÄÇ
            </div>
            <div class="usage-item">
              <strong>BASE64Ëß£Á†Å:</strong> Â∞ÜBASE64ÁºñÁ†ÅÁöÑÊï∞ÊçÆËøòÂéü‰∏∫ÂéüÂßãÊ†ºÂºè„ÄÇ
            </div>
            <div class="usage-item">
              <strong>Êñá‰ª∂Â§ÑÁêÜ:</strong> ÊîØÊåÅÊãñÊãΩ‰∏ä‰º†Êñá‰ª∂ÔºåËá™Âä®ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπËøõË°åÁºñËß£Á†Å„ÄÇ
            </div>
            <div class="usage-item">
              <strong>ÊâπÈáèÊìç‰Ωú:</strong> Âú®ÊâπÈáèÊ®°Âºè‰∏ãÔºåÊØèË°åËæìÂÖ•‰∏Ä‰∏™ÊñáÊú¨ÔºåÂ∑•ÂÖ∑‰ºöËá™Âä®Â§ÑÁêÜÊâÄÊúâÊúâÊïàÁöÑÂÜÖÂÆπ„ÄÇ
            </div>
            <div class="usage-item">
              <strong>Ê†ºÂºèÈ™åËØÅ:</strong> Â∑•ÂÖ∑‰ºöËá™Âä®Ê£ÄÊµãBASE64Ê†ºÂºèÁöÑÊúâÊïàÊÄßÔºåÂπ∂Âú®Â§ÑÁêÜÁªìÊûú‰∏≠Ê†áÊ≥®È™åËØÅÁä∂ÊÄÅ„ÄÇ
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>
</Layout>

<style>
  .main {
    min-height: calc(100vh - 80px);
    padding: 2rem 0;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .page-description {
    font-size: 1.125rem;
    color: var(--color-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
    font-family: var(--font-sans);
  }

  .encoder-section {
    margin-bottom: 3rem;
  }

  .encoder-card {
    background-color: var(--color-card);
    padding: 2rem;
    max-width: 1000px;
    margin: 0 auto;
  }

  /* Ê®°ÂºèÈÄâÊã©Âô® */
  .mode-selector {
    margin-bottom: 2rem;
  }

  .mode-tabs {
    display: flex;
    gap: 0.5rem;
    background-color: var(--color-code-bg);
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid var(--color-border);
  }

  .mode-tab {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: none;
    border: none;
    color: var(--color-secondary);
    font-family: var(--font-mono);
    font-size: 0.85rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 2px;
    flex: 1;
    justify-content: center;
  }

  .mode-tab:hover {
    color: var(--color-text);
    background-color: var(--color-hover);
  }

  .mode-tab.active {
    background-color: var(--color-accent);
    color: var(--color-bg);
  }

  /* Â§ÑÁêÜÊ®°Âºè */
  .processing-mode {
    display: block;
  }

  .processing-mode.hidden {
    display: none;
  }

  /* ËæìÂÖ•ËæìÂá∫Âå∫Âüü */
  .input-section,
  .output-section,
  .batch-input-section,
  .batch-output-section,
  .file-input-section,
  .file-output-section {
    margin-bottom: 2rem;
  }

  .input-group,
  .output-group {
    position: relative;
  }

  .input-label,
  .output-label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-text);
  }

  .copy-result-btn,
  .copy-batch-btn {
    background: none;
    border: 1px solid var(--color-border);
    color: var(--color-secondary);
    padding: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .copy-result-btn:hover,
  .copy-batch-btn:hover {
    color: var(--color-accent);
    background-color: var(--color-hover);
  }

  .copy-result-btn.copied,
  .copy-batch-btn.copied {
    color: #28a745;
    border-color: #28a745;
  }

  .text-textarea {
    width: 100%;
    padding: 1rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    background-color: var(--color-code-bg);
    border: 2px solid var(--color-border);
    border-radius: 4px;
    color: var(--color-text);
    line-height: 1.5;
    resize: vertical;
    outline: none;
    transition: border-color 0.2s ease;
  }

  .text-textarea:focus {
    border-color: var(--color-accent);
  }

  .text-textarea.output-textarea {
    background-color: var(--color-hover);
    cursor: text;
  }

  .batch-textarea {
    min-height: 200px;
  }

  .file-output-textarea {
    min-height: 250px;
    font-size: 0.8rem;
    word-break: break-all;
  }

  /* Êñá‰ª∂‰∏ä‰º†Âå∫Âüü */
  .file-upload-area {
    border: 2px dashed var(--color-border);
    border-radius: 8px;
    padding: 3rem 2rem;
    text-align: center;
    background-color: var(--color-code-bg);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    margin-bottom: 1rem;
  }

  .file-upload-area:hover {
    border-color: var(--color-accent);
    background-color: var(--color-hover);
  }

  .file-upload-area.dragover {
    border-color: var(--color-accent);
    background-color: var(--color-hover);
    transform: scale(1.02);
  }

  .upload-icon {
    color: var(--color-secondary);
    margin-bottom: 1rem;
  }

  .upload-title {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    color: var(--color-text);
    margin-bottom: 0.5rem;
  }

  .upload-subtitle {
    font-family: var(--font-sans);
    font-size: 0.875rem;
    color: var(--color-secondary);
    margin: 0;
  }

  .file-input {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    cursor: pointer;
  }

  /* Êñá‰ª∂‰ø°ÊÅØÊòæÁ§∫ */
  .file-info {
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .file-details {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .file-icon {
    font-size: 2rem;
    flex-shrink: 0;
  }

  .file-meta {
    flex: 1;
  }

  .file-name {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: 700;
    color: var(--color-text);
    margin-bottom: 0.25rem;
  }

  .file-size,
  .file-type {
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-secondary);
  }

  .remove-file-btn {
    background: none;
    border: 1px solid var(--color-border);
    color: var(--color-secondary);
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
    flex-shrink: 0;
  }

  .remove-file-btn:hover {
    color: #dc3545;
    border-color: #dc3545;
    background-color: var(--color-hover);
  }

  .file-output-actions {
    display: flex;
    gap: 0.5rem;
  }

  .download-result-btn {
    background: none;
    border: 1px solid var(--color-border);
    color: var(--color-secondary);
    padding: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .download-result-btn:hover {
    color: var(--color-accent);
    background-color: var(--color-hover);
  }

  /* ‰ø°ÊÅØÊòæÁ§∫ */
  .input-info,
  .output-info,
  .batch-info,
  .batch-result-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-secondary);
  }

  .char-count,
  .line-count,
  .valid-count,
  .processed-count,
  .success-count,
  .error-count {
    font-weight: 500;
  }

  .encoding-info,
  .validation-status {
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .validation-status.valid,
  .success-count {
    color: #28a745;
  }

  .validation-status.invalid,
  .error-count {
    color: #dc3545;
  }

  /* Êìç‰ΩúÊåâÈíÆ */
  .action-buttons,
  .batch-actions,
  .file-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin: 1.5rem 0;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background-color: var(--color-card);
    border: 2px solid var(--color-border);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
  }

  .action-btn:hover:not(:disabled) {
    background-color: var(--color-hover);
    border-color: var(--color-accent);
    color: var(--color-accent);
    transform: translateY(-1px);
  }

  .action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .encode-btn:hover:not(:disabled),
  .batch-encode-btn:hover:not(:disabled) {
    background-color: #007bff;
    border-color: #007bff;
    color: white;
  }

  .decode-btn:hover:not(:disabled),
  .batch-decode-btn:hover:not(:disabled) {
    background-color: #28a745;
    border-color: #28a745;
    color: white;
  }

  .clear-btn:hover:not(:disabled),
  .clear-batch-btn:hover:not(:disabled) {
    background-color: #dc3545;
    border-color: #dc3545;
    color: white;
  }

  /* ÁºñÁ†ÅÈÄâÈ°π */
  .encoding-options {
    border-top: 2px solid var(--color-border);
    padding-top: 2rem;
    margin-top: 2rem;
  }

  .options-title {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .option-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: 1rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .option-item:hover {
    background-color: var(--color-hover);
  }

  .option-item input[type="checkbox"] {
    width: 16px;
    height: 16px;
    accent-color: var(--color-accent);
    margin-bottom: 0.5rem;
  }

  .option-text {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    font-weight: 600;
    color: var(--color-text);
  }

  .option-desc {
    font-family: var(--font-sans);
    font-size: 0.75rem;
    color: var(--color-secondary);
  }

  /* Á§∫‰æãÂå∫Âüü */
  .examples-section {
    margin-bottom: 3rem;
  }

  .examples-content {
    background-color: var(--color-card);
    padding: 2rem;
  }

  .examples-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .examples-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .example-item {
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    padding: 1.5rem;
  }

  .example-title {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-text);
  }

  .example-demo {
    margin-bottom: 1rem;
  }

  .example-input,
  .example-output {
    margin-bottom: 0.75rem;
    padding: 0.75rem;
    background-color: var(--color-card);
    border: 1px solid var(--color-border);
    border-radius: 2px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    line-height: 1.4;
    word-break: break-all;
  }

  .example-input strong,
  .example-output strong {
    color: var(--color-accent);
    display: block;
    margin-bottom: 0.25rem;
  }

  .try-example-btn {
    width: 100%;
    padding: 0.5rem;
    background-color: var(--color-accent);
    color: var(--color-bg);
    border: none;
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .try-example-btn:hover {
    background-color: var(--color-text);
    transform: translateY(-1px);
  }

  /* ÂäüËÉΩÁâπÁÇπ */
  .features-section {
    margin-bottom: 3rem;
  }

  .features-content {
    background-color: var(--color-card);
    padding: 2rem;
  }

  .features-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .feature-item {
    text-align: center;
    padding: 1rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
  }

  .feature-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .feature-item h3 {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .feature-item p {
    color: var(--color-secondary);
    font-size: 0.85rem;
    line-height: 1.5;
    margin: 0;
    font-family: var(--font-sans);
  }

  /* ‰ΩøÁî®ËØ¥Êòé */
  .usage-section {
    margin-bottom: 2rem;
  }

  .usage-content {
    background-color: var(--color-card);
    padding: 2rem;
  }

  .usage-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .usage-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .usage-item {
    padding: 1rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-family: var(--font-sans);
    line-height: 1.6;
    color: var(--color-secondary);
  }

  .usage-item strong {
    color: var(--color-accent);
    font-weight: 700;
  }

  .hidden {
    display: none !important;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 768px) {
    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .encoder-card {
      padding: 1.5rem;
    }

    .mode-tabs {
      flex-direction: column;
    }

    .action-buttons,
    .batch-actions,
    .file-actions {
      flex-direction: column;
      gap: 0.75rem;
    }

    .action-btn {
      justify-content: center;
    }

    .options-grid {
      grid-template-columns: 1fr;
    }

    .examples-grid {
      grid-template-columns: 1fr;
    }

    .features-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .features-content,
    .usage-content,
    .examples-content {
      padding: 1.5rem;
    }

    .file-upload-area {
      padding: 2rem 1rem;
    }

    .file-details {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .file-output-actions {
      flex-direction: column;
      gap: 0.25rem;
    }
  }
</style>

<script>
  // BASE64ÁºñËß£Á†ÅÂ∑•ÂÖ∑Á±ª
  class Base64EncoderDecoder {
    constructor() {
      this.initElements();
      this.bindEvents();
      this.currentMode = 'text';
      this.currentFile = null;
    }

    initElements() {
      // Ê®°ÂºèÂàáÊç¢
      this.textModeTab = document.getElementById('text-mode-tab');
      this.fileModeTab = document.getElementById('file-mode-tab');
      this.batchModeTab = document.getElementById('batch-mode-tab');
      this.textMode = document.getElementById('text-mode');
      this.fileMode = document.getElementById('file-mode');
      this.batchMode = document.getElementById('batch-mode');

      // ÊñáÊú¨Â§ÑÁêÜÊ®°ÂºèÂÖÉÁ¥†
      this.textInput = document.getElementById('text-input');
      this.textOutput = document.getElementById('text-output');
      this.textEncodeBtn = document.getElementById('text-encode-btn');
      this.textDecodeBtn = document.getElementById('text-decode-btn');
      this.textClearBtn = document.getElementById('text-clear-btn');
      this.copyTextResultBtn = document.getElementById('copy-text-result-btn');

      // Êñá‰ª∂Â§ÑÁêÜÊ®°ÂºèÂÖÉÁ¥†
      this.fileUploadArea = document.getElementById('file-upload-area');
      this.fileInput = document.getElementById('file-input');
      this.fileInfo = document.getElementById('file-info');
      this.fileName = document.getElementById('file-name');
      this.fileSize = document.getElementById('file-size');
      this.fileType = document.getElementById('file-type');
      this.removeFileBtn = document.getElementById('remove-file-btn');
      this.fileEncodeBtn = document.getElementById('file-encode-btn');
      this.fileDecodeBtn = document.getElementById('file-decode-btn');
      this.fileOutput = document.getElementById('file-output');
      this.copyFileResultBtn = document.getElementById('copy-file-result-btn');
      this.downloadResultBtn = document.getElementById('download-result-btn');

      // ÊâπÈáèÂ§ÑÁêÜÊ®°ÂºèÂÖÉÁ¥†
      this.batchInput = document.getElementById('batch-input');
      this.batchOutput = document.getElementById('batch-output');
      this.batchEncodeBtn = document.getElementById('batch-encode-btn');
      this.batchDecodeBtn = document.getElementById('batch-decode-btn');
      this.clearBatchBtn = document.getElementById('clear-batch-btn');
      this.copyBatchBtn = document.getElementById('copy-batch-btn');

      // Áä∂ÊÄÅÊòæÁ§∫ÂÖÉÁ¥†
      this.textCharCount = document.getElementById('text-char-count');
      this.textOutputCharCount = document.getElementById('text-output-char-count');
      this.textEncodingInfo = document.getElementById('text-encoding-info');
      this.textValidationStatus = document.getElementById('text-validation-status');
      this.fileOutputCharCount = document.getElementById('file-output-char-count');
      this.fileValidationStatus = document.getElementById('file-validation-status');
      this.batchLineCount = document.getElementById('batch-line-count');
      this.batchValidCount = document.getElementById('batch-valid-count');
      this.processedCount = document.getElementById('processed-count');
      this.successCount = document.getElementById('success-count');
      this.errorCount = document.getElementById('error-count');

      // ÁºñÁ†ÅÈÄâÈ°π
      this.urlSafeBase64 = document.getElementById('url-safe-base64');
      this.removePadding = document.getElementById('remove-padding');
      this.lineBreaks = document.getElementById('line-breaks');

      // Á§∫‰æãÊåâÈíÆ
      this.tryExampleBtns = document.querySelectorAll('.try-example-btn');
    }

    bindEvents() {
      // Ê®°ÂºèÂàáÊç¢
      this.textModeTab.addEventListener('click', () => this.switchMode('text'));
      this.fileModeTab.addEventListener('click', () => this.switchMode('file'));
      this.batchModeTab.addEventListener('click', () => this.switchMode('batch'));

      // ÊñáÊú¨Â§ÑÁêÜÊ®°Âºè‰∫ã‰ª∂
      this.textInput.addEventListener('input', () => this.updateTextStatus());
      this.textEncodeBtn.addEventListener('click', () => this.encodeText());
      this.textDecodeBtn.addEventListener('click', () => this.decodeText());
      this.textClearBtn.addEventListener('click', () => this.clearText());
      this.copyTextResultBtn.addEventListener('click', () => this.copyTextResult());

      // Êñá‰ª∂Â§ÑÁêÜÊ®°Âºè‰∫ã‰ª∂
      this.fileUploadArea.addEventListener('click', () => this.fileInput.click());
      this.fileUploadArea.addEventListener('dragover', (e) => this.handleDragOver(e));
      this.fileUploadArea.addEventListener('dragleave', (e) => this.handleDragLeave(e));
      this.fileUploadArea.addEventListener('drop', (e) => this.handleFileDrop(e));
      this.fileInput.addEventListener('change', (e) => this.handleFileSelect(e));
      this.removeFileBtn.addEventListener('click', () => this.removeFile());
      this.fileEncodeBtn.addEventListener('click', () => this.encodeFile());
      this.fileDecodeBtn.addEventListener('click', () => this.decodeFile());
      this.copyFileResultBtn.addEventListener('click', () => this.copyFileResult());
      this.downloadResultBtn.addEventListener('click', () => this.downloadResult());

      // ÊâπÈáèÂ§ÑÁêÜÊ®°Âºè‰∫ã‰ª∂
      this.batchInput.addEventListener('input', () => this.updateBatchStatus());
      this.batchEncodeBtn.addEventListener('click', () => this.batchEncode());
      this.batchDecodeBtn.addEventListener('click', () => this.batchDecode());
      this.clearBatchBtn.addEventListener('click', () => this.clearBatch());
      this.copyBatchBtn.addEventListener('click', () => this.copyBatchResults());

      // Á§∫‰æãÊåâÈíÆ
      this.tryExampleBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
          const input = e.target.getAttribute('data-input');
          this.loadExample(input);
        });
      });

      // ÂàùÂßãÂåñÁä∂ÊÄÅ
      this.updateTextStatus();
      this.updateBatchStatus();
    }

    switchMode(mode) {
      this.currentMode = mode;
      
      // Êõ¥Êñ∞Ê†áÁ≠æÁä∂ÊÄÅ
      document.querySelectorAll('.mode-tab').forEach(tab => tab.classList.remove('active'));
      document.querySelectorAll('.processing-mode').forEach(mode => mode.classList.add('hidden'));
      
      if (mode === 'text') {
        this.textModeTab.classList.add('active');
        this.textMode.classList.remove('hidden');
      } else if (mode === 'file') {
        this.fileModeTab.classList.add('active');
        this.fileMode.classList.remove('hidden');
      } else if (mode === 'batch') {
        this.batchModeTab.classList.add('active');
        this.batchMode.classList.remove('hidden');
      }
    }

    updateTextStatus() {
      const input = this.textInput.value;
      const charCount = input.length;
      
      this.textCharCount.textContent = `${charCount} Â≠óÁ¨¶`;
    }

    updateBatchStatus() {
      const input = this.batchInput.value;
      const lines = input.split('\n').filter(line => line.trim());
      const validLines = lines.filter(line => line.trim().length > 0);
      
      this.batchLineCount.textContent = `${lines.length} Ë°å`;
      this.batchValidCount.textContent = `${validLines.length} ‰∏™ÊúâÊïàÈ°π`;
    }

    encodeText() {
      const input = this.textInput.value;
      if (!input) return;

      try {
        const result = this.performBase64Encode(input);
        this.textOutput.value = result;
        this.updateTextOutputStatus(result, true);
      } catch (error) {
        this.textOutput.value = `ÁºñÁ†ÅÂ§±Ë¥•: ${error.message}`;
        this.updateTextOutputStatus('', false);
      }
    }

    decodeText() {
      const input = this.textInput.value.trim();
      if (!input) return;

      try {
        const result = this.performBase64Decode(input);
        this.textOutput.value = result;
        this.updateTextOutputStatus(result, true);
      } catch (error) {
        this.textOutput.value = `Ëß£Á†ÅÂ§±Ë¥•: ${error.message}`;
        this.updateTextOutputStatus('', false);
      }
    }

    performBase64Encode(input) {
      // Â∞ÜÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫UTF-8Â≠óËäÇ
      const utf8Bytes = new TextEncoder().encode(input);
      
      // ËΩ¨Êç¢‰∏∫‰∫åËøõÂà∂Â≠óÁ¨¶‰∏≤
      let binaryString = '';
      for (let i = 0; i < utf8Bytes.length; i++) {
        binaryString += String.fromCharCode(utf8Bytes[i]);
      }
      
      // BASE64ÁºñÁ†Å
      let result = btoa(binaryString);
      
      // Â∫îÁî®ÁºñÁ†ÅÈÄâÈ°π
      if (this.urlSafeBase64.checked) {
        result = result.replace(/\+/g, '-').replace(/\//g, '_');
      }
      
      if (this.removePadding.checked) {
        result = result.replace(/=/g, '');
      }
      
      if (this.lineBreaks.checked) {
        result = result.replace(/(.{76})/g, '$1\n');
      }
      
      return result;
    }

    performBase64Decode(input) {
      let processedInput = input.replace(/\s/g, ''); // ÁßªÈô§ÊâÄÊúâÁ©∫ÁôΩÂ≠óÁ¨¶
      
      // Â§ÑÁêÜURLÂÆâÂÖ®ÁºñÁ†Å
      if (this.urlSafeBase64.checked || processedInput.includes('-') || processedInput.includes('_')) {
        processedInput = processedInput.replace(/-/g, '+').replace(/_/g, '/');
      }
      
      // Ê∑ªÂä†Â°´ÂÖÖÂ≠óÁ¨¶
      while (processedInput.length % 4) {
        processedInput += '=';
      }
      
      // È™åËØÅBASE64Ê†ºÂºè
      if (!this.isValidBase64(processedInput)) {
        throw new Error('Êó†ÊïàÁöÑBASE64Ê†ºÂºè');
      }
      
      try {
        // BASE64Ëß£Á†Å
        const binaryString = atob(processedInput);
        
        // ËΩ¨Êç¢‰∏∫UTF-8Â≠óÁ¨¶‰∏≤
        const bytes = new Uint8Array(binaryString.length);
        for (let i = 0; i < binaryString.length; i++) {
          bytes[i] = binaryString.charCodeAt(i);
        }
        
        return new TextDecoder('utf-8').decode(bytes);
      } catch (error) {
        throw new Error('Ëß£Á†ÅÂ§±Ë¥•ÔºåÂèØËÉΩÂåÖÂê´Êó†ÊïàÁöÑBASE64Â∫èÂàó');
      }
    }

    updateTextOutputStatus(result, success) {
      const charCount = result.length;
      this.textOutputCharCount.textContent = `${charCount} Â≠óÁ¨¶`;
      
      if (success && result) {
        const isValid = this.isValidBase64(result);
        this.textValidationStatus.textContent = isValid ? 'ÊúâÊïàBASE64' : 'ÊñáÊú¨ÂÜÖÂÆπ';
        this.textValidationStatus.className = `validation-status ${isValid ? 'valid' : 'partial'}`;
      } else {
        this.textValidationStatus.textContent = success ? '' : 'Â§ÑÁêÜÂ§±Ë¥•';
        this.textValidationStatus.className = `validation-status ${success ? '' : 'invalid'}`;
      }
    }

    clearText() {
      this.textInput.value = '';
      this.textOutput.value = '';
      this.updateTextStatus();
      this.updateTextOutputStatus('', true);
    }

    // Êñá‰ª∂Â§ÑÁêÜÊñπÊ≥ï
    handleDragOver(e) {
      e.preventDefault();
      this.fileUploadArea.classList.add('dragover');
    }

    handleDragLeave(e) {
      e.preventDefault();
      this.fileUploadArea.classList.remove('dragover');
    }

    handleFileDrop(e) {
      e.preventDefault();
      this.fileUploadArea.classList.remove('dragover');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        this.processFile(files[0]);
      }
    }

    handleFileSelect(e) {
      const files = e.target.files;
      if (files.length > 0) {
        this.processFile(files[0]);
      }
    }

    processFile(file) {
      // Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è (10MBÈôêÂà∂)
      if (file.size > 10 * 1024 * 1024) {
        alert('Êñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá 10MB');
        return;
      }

      this.currentFile = file;
      
      // ÊòæÁ§∫Êñá‰ª∂‰ø°ÊÅØ
      this.fileName.textContent = file.name;
      this.fileSize.textContent = this.formatFileSize(file.size);
      this.fileType.textContent = file.type || 'Êú™Áü•Á±ªÂûã';
      
      this.fileInfo.classList.remove('hidden');
      this.fileEncodeBtn.disabled = false;
      this.fileDecodeBtn.disabled = false;
    }

    removeFile() {
      this.currentFile = null;
      this.fileInfo.classList.add('hidden');
      this.fileEncodeBtn.disabled = true;
      this.fileDecodeBtn.disabled = true;
      this.fileOutput.value = '';
      this.fileInput.value = '';
      this.updateFileOutputStatus('', true);
    }

    async encodeFile() {
      if (!this.currentFile) return;

      try {
        const arrayBuffer = await this.currentFile.arrayBuffer();
        const bytes = new Uint8Array(arrayBuffer);
        
        // ËΩ¨Êç¢‰∏∫‰∫åËøõÂà∂Â≠óÁ¨¶‰∏≤
        let binaryString = '';
        for (let i = 0; i < bytes.length; i++) {
          binaryString += String.fromCharCode(bytes[i]);
        }
        
        // BASE64ÁºñÁ†Å
        let result = btoa(binaryString);
        
        // Â∫îÁî®ÁºñÁ†ÅÈÄâÈ°π
        if (this.urlSafeBase64.checked) {
          result = result.replace(/\+/g, '-').replace(/\//g, '_');
        }
        
        if (this.removePadding.checked) {
          result = result.replace(/=/g, '');
        }
        
        if (this.lineBreaks.checked) {
          result = result.replace(/(.{76})/g, '$1\n');
        }
        
        this.fileOutput.value = result;
        this.updateFileOutputStatus(result, true);
      } catch (error) {
        this.fileOutput.value = `Êñá‰ª∂ÁºñÁ†ÅÂ§±Ë¥•: ${error.message}`;
        this.updateFileOutputStatus('', false);
      }
    }

    async decodeFile() {
      if (!this.currentFile) return;

      try {
        const text = await this.currentFile.text();
        const result = this.performBase64Decode(text.trim());
        
        this.fileOutput.value = result;
        this.updateFileOutputStatus(result, true);
      } catch (error) {
        this.fileOutput.value = `Êñá‰ª∂Ëß£Á†ÅÂ§±Ë¥•: ${error.message}`;
        this.updateFileOutputStatus('', false);
      }
    }

    updateFileOutputStatus(result, success) {
      const charCount = result.length;
      this.fileOutputCharCount.textContent = `${charCount} Â≠óÁ¨¶`;
      
      if (success && result) {
        const isValid = this.isValidBase64(result);
        this.fileValidationStatus.textContent = isValid ? 'ÊúâÊïàBASE64' : 'ÊñáÊú¨ÂÜÖÂÆπ';
        this.fileValidationStatus.className = `validation-status ${isValid ? 'valid' : 'partial'}`;
      } else {
        this.fileValidationStatus.textContent = success ? '' : 'Â§ÑÁêÜÂ§±Ë¥•';
        this.fileValidationStatus.className = `validation-status ${success ? '' : 'invalid'}`;
      }
    }

    // ÊâπÈáèÂ§ÑÁêÜÊñπÊ≥ï
    batchEncode() {
      const input = this.batchInput.value.trim();
      if (!input) return;

      const lines = input.split('\n').filter(line => line.trim());
      const results = [];
      let successCount = 0;
      let errorCount = 0;

      lines.forEach((line, index) => {
        const trimmedLine = line.trim();
        if (!trimmedLine) return;

        try {
          const encoded = this.performBase64Encode(trimmedLine);
          results.push(encoded);
          successCount++;
        } catch (error) {
          results.push(`[ÈîôËØØ] ${trimmedLine} - ${error.message}`);
          errorCount++;
        }
      });

      this.batchOutput.value = results.join('\n');
      this.updateBatchResults(lines.length, successCount, errorCount);
    }

    batchDecode() {
      const input = this.batchInput.value.trim();
      if (!input) return;

      const lines = input.split('\n').filter(line => line.trim());
      const results = [];
      let successCount = 0;
      let errorCount = 0;

      lines.forEach((line, index) => {
        const trimmedLine = line.trim();
        if (!trimmedLine) return;

        try {
          const decoded = this.performBase64Decode(trimmedLine);
          results.push(decoded);
          successCount++;
        } catch (error) {
          results.push(`[ÈîôËØØ] ${trimmedLine} - ${error.message}`);
          errorCount++;
        }
      });

      this.batchOutput.value = results.join('\n');
      this.updateBatchResults(lines.length, successCount, errorCount);
    }

    updateBatchResults(processed, success, error) {
      this.processedCount.textContent = `Â∑≤Â§ÑÁêÜ: ${processed}`;
      this.successCount.textContent = `ÊàêÂäü: ${success}`;
      this.errorCount.textContent = `Â§±Ë¥•: ${error}`;
    }

    clearBatch() {
      this.batchInput.value = '';
      this.batchOutput.value = '';
      this.updateBatchStatus();
      this.updateBatchResults(0, 0, 0);
    }

    // Â§çÂà∂Âíå‰∏ãËΩΩÊñπÊ≥ï
    async copyTextResult() {
      const result = this.textOutput.value;
      if (!result) return;

      try {
        await navigator.clipboard.writeText(result);
        this.showCopyFeedback(this.copyTextResultBtn);
      } catch (error) {
        this.fallbackCopy(result, this.copyTextResultBtn);
      }
    }

    async copyFileResult() {
      const result = this.fileOutput.value;
      if (!result) return;

      try {
        await navigator.clipboard.writeText(result);
        this.showCopyFeedback(this.copyFileResultBtn);
      } catch (error) {
        this.fallbackCopy(result, this.copyFileResultBtn);
      }
    }

    async copyBatchResults() {
      const results = this.batchOutput.value;
      if (!results) return;

      try {
        await navigator.clipboard.writeText(results);
        this.showCopyFeedback(this.copyBatchBtn);
      } catch (error) {
        this.fallbackCopy(results, this.copyBatchBtn);
      }
    }

    downloadResult() {
      const result = this.fileOutput.value;
      if (!result) return;

      const blob = new Blob([result], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `base64_result_${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    fallbackCopy(text, button) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      
      try {
        document.execCommand('copy');
        this.showCopyFeedback(button);
      } catch (error) {
        console.error('Â§çÂà∂Â§±Ë¥•:', error);
      }
      
      document.body.removeChild(textArea);
    }

    showCopyFeedback(button) {
      const originalHTML = button.innerHTML;
      
      button.classList.add('copied');
      button.innerHTML = `
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <polyline points="20,6 9,17 4,12"></polyline>
        </svg>
      `;
      
      setTimeout(() => {
        button.classList.remove('copied');
        button.innerHTML = originalHTML;
      }, 2000);
    }

    loadExample(input) {
      this.switchMode('text');
      this.textInput.value = input;
      this.updateTextStatus();
      this.encodeText();
    }

    isValidBase64(str) {
      try {
        // ÁßªÈô§Á©∫ÁôΩÂ≠óÁ¨¶
        const cleaned = str.replace(/\s/g, '');
        
        // Ê£ÄÊü•Â≠óÁ¨¶ÊòØÂê¶ÈÉΩÊòØÊúâÊïàÁöÑBASE64Â≠óÁ¨¶
        const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
        if (!base64Regex.test(cleaned)) {
          return false;
        }
        
        // Ê£ÄÊü•ÈïøÂ∫¶ÊòØÂê¶ÊòØ4ÁöÑÂÄçÊï∞
        if (cleaned.length % 4 !== 0) {
          return false;
        }
        
        // Â∞ùËØïËß£Á†Å
        atob(cleaned);
        return true;
      } catch (e) {
        return false;
      }
    }

    formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
  }

  // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
  document.addEventListener('DOMContentLoaded', () => {
    new Base64EncoderDecoder();
  });
</script>