---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
---

<Layout title="IP信息查看器 - 数字花园" description="检测当前外网IP地址，支持多个API源对比，帮助用户了解翻墙软件分配的IP地址">
  <Header />
  
  <main class="main">
    <div class="container">
      <header class="page-header">
        <h1 class="page-title">IP信息查看器</h1>
        <p class="page-description">
          查看你的外网IP地址及对应的地理位置信息。使用翻墙软件时，不同API可能显示不同的IP地址。
        </p>
      </header>

      <!-- 你的IP地址显示 -->
      <section class="current-ip-section">
        <div class="current-ip-card industrial-border">
          <h2 class="current-ip-title">你的IP地址</h2>
          <div class="current-ip-display" id="current-ip-display">
            <div class="ip-value" id="main-ip-value">检测中...</div>
            <button class="copy-ip-btn" id="copy-main-ip" title="复制IP地址">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
            </button>
          </div>
          
          <div class="current-ip-details" id="current-ip-details">
            <div class="detail-item">
              <span class="detail-label">地理位置:</span>
              <span class="detail-value" id="main-location">获取中...</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">ISP提供商:</span>
              <span class="detail-value" id="main-isp">获取中...</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">时区:</span>
              <span class="detail-value" id="main-timezone">获取中...</span>
            </div>
            <div class="detail-item">
              <span class="detail-label">经纬度:</span>
              <span class="detail-value" id="main-coordinates">获取中...</span>
            </div>
          </div>
        </div>
      </section>

      <!-- API对比结果 -->
      <section class="api-comparison-section">
        <div class="comparison-header">
          <h2 class="comparison-title">多源IP对比</h2>
          <div class="refresh-controls">
            <button class="refresh-btn" id="refresh-all-btn">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <polyline points="23,4 23,10 17,10"></polyline>
                <polyline points="1,20 1,14 7,14"></polyline>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
              </svg>
              刷新检测
            </button>
          </div>
        </div>

        <div class="api-results-table">
          <table class="ip-comparison-table" id="ip-comparison-table">
            <thead>
              <tr>
                <th>API来源</th>
                <th>IP地址</th>
                <th>地理位置</th>
                <th>状态</th>
              </tr>
            </thead>
            <tbody id="comparison-tbody">
              <!-- 动态生成内容 -->
            </tbody>
          </table>
        </div>
      </section>

      <!-- 功能说明 -->
      <section class="features-section">
        <div class="features-content industrial-border">
          <h2 class="features-title">功能特点</h2>
          <div class="features-grid">
            <div class="feature-item">
              <div class="feature-icon">🌐</div>
              <h3>地理位置</h3>
              <p>显示IP地址对应的国家、城市、地区等地理位置信息</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">📡</div>
              <h3>ISP信息</h3>
              <p>显示互联网服务提供商信息和网络组织信息</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">🕐</div>
              <h3>时区信息</h3>
              <p>显示IP地址所在地区的时区信息</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">📍</div>
              <h3>精确坐标</h3>
              <p>提供经纬度坐标，方便在地图上定位</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">🔒</div>
              <h3>隐私保护</h3>
              <p>所有查询在本地执行，不会存储你的IP信息</p>
            </div>
            <div class="feature-item">
              <div class="feature-icon">📋</div>
              <h3>一键复制</h3>
              <p>支持复制和导出查询结果，方便后续使用</p>
            </div>
          </div>
        </div>
      </section>

      <!-- 使用说明 -->
      <section class="usage-section">
        <div class="usage-content industrial-border">
          <h2 class="usage-title">使用说明</h2>
          <div class="usage-list">
            <div class="usage-item">
              <strong>自动检测:</strong> 页面加载时自动检测你的当前外网IP地址及相关信息。
            </div>
            <div class="usage-item">
              <strong>信息查询:</strong> 工具会查询地理位置信息，可能需要几秒钟时间。
            </div>
            <div class="usage-item">
              <strong>隐私说明:</strong> 本工具仅显示公开的IP信息，不会收集或存储你的个人信息。
            </div>
            <div class="usage-item">
              <strong>网络来源:</strong> 高速生活时间内可能会显示你的真实网络位置信息。
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>
</Layout>

<style>
  .main {
    min-height: calc(100vh - 80px);
    padding: 2rem 0;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .page-description {
    font-size: 1.125rem;
    color: var(--color-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
    font-family: var(--font-sans);
  }

  /* 当前IP显示区域 */
  .current-ip-section {
    margin-bottom: 3rem;
  }

  .current-ip-card {
    background-color: var(--color-card);
    padding: 2rem;
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
  }

  .current-ip-title {
    font-family: var(--font-mono);
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .current-ip-display {
    position: relative;
    margin-bottom: 2rem;
  }

  .ip-value {
    font-family: var(--font-mono);
    font-size: 2rem;
    font-weight: 700;
    color: var(--color-accent);
    letter-spacing: 2px;
    padding: 1rem 2rem;
    background-color: var(--color-code-bg);
    border: 2px solid var(--color-border);
    border-radius: 8px;
    display: inline-block;
    min-width: 200px;
  }

  .copy-ip-btn {
    position: absolute;
    top: 50%;
    right: calc(50% - 120px);
    transform: translateY(-50%);
    background: var(--color-card);
    border: 2px solid var(--color-border);
    color: var(--color-secondary);
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
  }

  .copy-ip-btn:hover {
    color: var(--color-accent);
    background-color: var(--color-hover);
    transform: translateY(-50%) translateY(-1px);
  }

  .copy-ip-btn.copied {
    color: #28a745;
    border-color: #28a745;
  }

  .current-ip-details {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    text-align: left;
  }

  .detail-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
  }

  .detail-label {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: var(--color-secondary);
  }

  .detail-value {
    font-family: var(--font-sans);
    font-size: 0.9rem;
    color: var(--color-text);
    font-weight: 500;
    text-align: right;
    word-break: break-word;
  }

  /* API对比区域 */
  .api-comparison-section {
    margin-bottom: 3rem;
  }

  .comparison-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background-color: var(--color-card);
    border: 2px solid var(--color-border);
    border-radius: 4px;
  }

  .comparison-title {
    font-family: var(--font-mono);
    font-size: 1.5rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
    margin: 0;
  }

  .refresh-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background-color: var(--color-accent);
    color: var(--color-bg);
    border: 2px solid var(--color-accent);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .refresh-btn:hover {
    background-color: var(--color-text);
    border-color: var(--color-text);
    transform: translateY(-1px);
  }

  .refresh-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* 对比表格 */
  .api-results-table {
    background-color: var(--color-card);
    border: 2px solid var(--color-border);
    border-radius: 4px;
    overflow: hidden;
  }

  .ip-comparison-table {
    width: 100%;
    border-collapse: collapse;
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  .ip-comparison-table th {
    background-color: var(--color-code-bg);
    padding: 1rem;
    text-align: left;
    border-bottom: 2px solid var(--color-border);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: var(--color-text);
  }

  .ip-comparison-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--color-border);
    color: var(--color-secondary);
    vertical-align: top;
  }

  .ip-comparison-table tr:last-child td {
    border-bottom: none;
  }

  .ip-comparison-table tr:hover {
    background-color: var(--color-hover);
  }

  .api-source {
    font-weight: 700;
    color: var(--color-text);
  }

  .api-source.domestic {
    color: var(--color-accent);
  }

  .api-source.foreign {
    color: #007bff;
  }

  .ip-address {
    font-family: var(--font-mono);
    font-weight: 700;
    color: var(--color-accent);
    letter-spacing: 1px;
  }

  .location-info {
    font-family: var(--font-sans);
    line-height: 1.4;
  }

  .api-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  .status-indicator.success { background-color: #28a745; }
  .status-indicator.error { background-color: #dc3545; }
  .status-indicator.loading { 
    background-color: #ffc107; 
    animation: pulse 1s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .status-text {
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-text.success { color: #28a745; }
  .status-text.error { color: #dc3545; }
  .status-text.loading { color: #ffc107; }

  /* 功能特点 */
  .features-section {
    margin-bottom: 3rem;
  }

  .features-content {
    background-color: var(--color-card);
    padding: 2rem;
  }

  .features-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .feature-item {
    text-align: center;
    padding: 1rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
  }

  .feature-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .feature-item h3 {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .feature-item p {
    color: var(--color-secondary);
    font-size: 0.85rem;
    line-height: 1.5;
    margin: 0;
    font-family: var(--font-sans);
  }

  /* 使用说明 */
  .usage-section {
    margin-bottom: 2rem;
  }

  .usage-content {
    background-color: var(--color-card);
    padding: 2rem;
  }

  .usage-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .usage-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .usage-item {
    padding: 1rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-family: var(--font-sans);
    line-height: 1.6;
    color: var(--color-secondary);
  }

  .usage-item strong {
    color: var(--color-accent);
    font-weight: 700;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .current-ip-card {
      padding: 1.5rem;
    }

    .ip-value {
      font-size: 1.5rem;
      padding: 0.75rem 1rem;
      min-width: 150px;
    }

    .copy-ip-btn {
      position: static;
      transform: none;
      margin-top: 1rem;
      display: block;
      margin-left: auto;
      margin-right: auto;
    }

    .current-ip-details {
      grid-template-columns: 1fr;
    }

    .comparison-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .ip-comparison-table {
      font-size: 0.8rem;
    }

    .ip-comparison-table th,
    .ip-comparison-table td {
      padding: 0.75rem 0.5rem;
    }

    .features-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .features-content,
    .usage-content {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // 简化的IP信息查看器 - 专注于翻墙IP检测
  class SimpleIPViewer {
    constructor() {
      this.apis = [
        {
          id: 'ipapi-co',
          name: 'ipapi.co',
          category: '国外',
          url: 'https://ipapi.co/json/',
          timeout: 5000
        },
        {
          id: 'ip-api',
          name: 'ip-api.com',
          category: '国外',
          url: 'https://ip-api.com/json/',
          timeout: 5000
        },
        {
          id: 'ipinfo',
          name: 'ipinfo.io',
          category: '国外',
          url: 'https://ipinfo.io/json',
          timeout: 5000
        }
      ];

      this.results = {};
      this.initElements();
      this.bindEvents();
      this.startDetection();
    }

    initElements() {
      this.mainIpValue = document.getElementById('main-ip-value');
      this.mainLocation = document.getElementById('main-location');
      this.mainIsp = document.getElementById('main-isp');
      this.mainTimezone = document.getElementById('main-timezone');
      this.mainCoordinates = document.getElementById('main-coordinates');
      this.copyMainIpBtn = document.getElementById('copy-main-ip');
      this.refreshAllBtn = document.getElementById('refresh-all-btn');
      this.comparisonTbody = document.getElementById('comparison-tbody');
    }

    bindEvents() {
      this.refreshAllBtn.addEventListener('click', () => {
        this.startDetection();
      });

      this.copyMainIpBtn.addEventListener('click', () => {
        this.copyMainIP();
      });
    }

    async startDetection() {
      this.refreshAllBtn.disabled = true;
      this.results = {};
      
      // 重置显示
      this.mainIpValue.textContent = '检测中...';
      this.mainLocation.textContent = '获取中...';
      this.mainIsp.textContent = '获取中...';
      this.mainTimezone.textContent = '获取中...';
      this.mainCoordinates.textContent = '获取中...';

      // 创建表格行
      this.createTableRows();

      // 并发查询所有API
      const promises = this.apis.map(api => this.queryAPI(api));
      
      try {
        await Promise.allSettled(promises);
        this.updateMainDisplay();
      } catch (error) {
        console.error('检测过程中发生错误:', error);
      } finally {
        this.refreshAllBtn.disabled = false;
      }
    }

    createTableRows() {
      this.comparisonTbody.innerHTML = '';
      
      this.apis.forEach(api => {
        const row = document.createElement('tr');
        row.id = `api-row-${api.id}`;
        
        row.innerHTML = `
          <td class="api-source ${api.category === '国内' ? 'domestic' : 'foreign'}">
            ${api.name}
            <br><small>(${api.category})</small>
          </td>
          <td class="ip-address" id="ip-${api.id}">检测中...</td>
          <td class="location-info" id="location-${api.id}">获取中...</td>
          <td class="api-status">
            <div class="status-indicator loading" id="status-${api.id}"></div>
            <span class="status-text loading" id="status-text-${api.id}">查询中</span>
          </td>
        `;
        
        this.comparisonTbody.appendChild(row);
      });
    }

    async queryAPI(api) {
      const startTime = Date.now();
      
      try {
        const response = await this.fetchWithTimeout(api.url, api.timeout);
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        const standardizedData = this.standardizeData(api.id, data);
        
        this.results[api.id] = {
          success: true,
          data: standardizedData,
          responseTime: responseTime
        };
        
        this.updateTableRow(api.id, 'success', standardizedData);
        
      } catch (error) {
        console.error(`API ${api.id} 查询失败:`, error);
        
        this.results[api.id] = {
          success: false,
          error: error.message,
          responseTime: Date.now() - startTime
        };
        
        this.updateTableRow(api.id, 'error', null, error.message);
      }
    }

    async fetchWithTimeout(url, timeout) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      
      try {
        const response = await fetch(url, {
          signal: controller.signal,
          mode: 'cors'
        });
        clearTimeout(timeoutId);
        return response;
      } catch (error) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
          throw new Error('请求超时');
        }
        throw error;
      }
    }

    standardizeData(apiId, rawData) {
      const standardized = {
        ip: '',
        country: '',
        region: '',
        city: '',
        latitude: '',
        longitude: '',
        timezone: '',
        isp: '',
        org: ''
      };

      switch (apiId) {
        case 'ipapi-co':
          standardized.ip = rawData.ip || '';
          standardized.country = rawData.country_name || '';
          standardized.region = rawData.region || '';
          standardized.city = rawData.city || '';
          standardized.latitude = rawData.latitude || '';
          standardized.longitude = rawData.longitude || '';
          standardized.timezone = rawData.timezone || '';
          standardized.isp = rawData.org || '';
          standardized.org = rawData.org || '';
          break;
          
        case 'ip-api':
          standardized.ip = rawData.query || '';
          standardized.country = rawData.country || '';
          standardized.region = rawData.regionName || '';
          standardized.city = rawData.city || '';
          standardized.latitude = rawData.lat || '';
          standardized.longitude = rawData.lon || '';
          standardized.timezone = rawData.timezone || '';
          standardized.isp = rawData.isp || '';
          standardized.org = rawData.org || '';
          break;
          
        case 'ipinfo':
          standardized.ip = rawData.ip || '';
          standardized.country = rawData.country || '';
          standardized.region = rawData.region || '';
          standardized.city = rawData.city || '';
          if (rawData.loc) {
            const [lat, lon] = rawData.loc.split(',');
            standardized.latitude = lat || '';
            standardized.longitude = lon || '';
          }
          standardized.timezone = rawData.timezone || '';
          standardized.isp = rawData.org || '';
          standardized.org = rawData.org || '';
          break;
      }

      return standardized;
    }

    updateTableRow(apiId, status, data, errorMessage) {
      const ipElement = document.getElementById(`ip-${apiId}`);
      const locationElement = document.getElementById(`location-${apiId}`);
      const statusIndicator = document.getElementById(`status-${apiId}`);
      const statusText = document.getElementById(`status-text-${apiId}`);
      
      statusIndicator.className = `status-indicator ${status}`;
      statusText.className = `status-text ${status}`;
      
      if (status === 'success' && data) {
        ipElement.textContent = data.ip || '未知';
        
        const location = [data.city, data.region, data.country]
          .filter(v => v && v !== '未知')
          .join(', ') || '未知';
        locationElement.textContent = location;
        
        statusText.textContent = '成功';
      } else if (status === 'error') {
        ipElement.textContent = '获取失败';
        locationElement.textContent = errorMessage || '查询失败';
        statusText.textContent = '失败';
      }
    }

    updateMainDisplay() {
      const successfulResults = Object.values(this.results).filter(r => r.success);
      
      if (successfulResults.length === 0) {
        this.mainIpValue.textContent = '检测失败';
        this.mainLocation.textContent = '无法获取';
        this.mainIsp.textContent = '无法获取';
        this.mainTimezone.textContent = '无法获取';
        this.mainCoordinates.textContent = '无法获取';
        return;
      }

      // 获取最常见的值作为主显示
      const getConsensusValue = (field) => {
        const values = successfulResults.map(r => r.data[field]).filter(v => v && v !== '未知');
        if (values.length === 0) return '未知';
        
        // 计算每个值的出现次数
        const counts = {};
        values.forEach(value => {
          counts[value] = (counts[value] || 0) + 1;
        });
        
        // 返回出现次数最多的值
        return Object.keys(counts).reduce((a, b) => counts[a] > counts[b] ? a : b);
      };

      // 更新主显示
      const ip = getConsensusValue('ip');
      this.mainIpValue.textContent = ip;
      
      const country = getConsensusValue('country');
      const region = getConsensusValue('region');
      const city = getConsensusValue('city');
      const location = [city, region, country].filter(v => v && v !== '未知').join(', ') || '未知';
      this.mainLocation.textContent = location;
      
      this.mainIsp.textContent = getConsensusValue('isp');
      this.mainTimezone.textContent = getConsensusValue('timezone');
      
      const lat = getConsensusValue('latitude');
      const lon = getConsensusValue('longitude');
      const coordinates = (lat && lon && lat !== '未知' && lon !== '未知') 
        ? `${lat}, ${lon}` 
        : '未知';
      this.mainCoordinates.textContent = coordinates;
    }

    async copyMainIP() {
      const ip = this.mainIpValue.textContent;
      
      if (!ip || ip === '未知' || ip === '检测中...' || ip === '检测失败') return;

      try {
        await navigator.clipboard.writeText(ip);
        this.showCopyFeedback(this.copyMainIpBtn);
      } catch (error) {
        this.fallbackCopy(ip, this.copyMainIpBtn);
      }
    }

    fallbackCopy(text, button) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      
      try {
        document.execCommand('copy');
        this.showCopyFeedback(button);
      } catch (error) {
        console.error('复制失败:', error);
      }
      
      document.body.removeChild(textArea);
    }

    showCopyFeedback(button) {
      const originalHTML = button.innerHTML;
      
      button.classList.add('copied');
      button.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <polyline points="20,6 9,17 4,12"></polyline>
        </svg>
      `;
      
      setTimeout(() => {
        button.classList.remove('copied');
        button.innerHTML = originalHTML;
      }, 2000);
    }
  }

  // 页面加载完成后初始化
  document.addEventListener('DOMContentLoaded', () => {
    new SimpleIPViewer();
  });
</script>