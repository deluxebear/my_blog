---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
---

<Layout title="密码生成器 - 数字花园" description="生成安全的随机密码，支持自定义长度、字符类型和复杂度要求">
  <Header />
  
  <main class="main">
    <div class="container">
      <header class="page-header">
        <h1 class="page-title">密码生成器</h1>
        <p class="page-description">
          生成安全可靠的随机密码，支持自定义长度和字符类型，确保你的账户安全
        </p>
      </header>

      <!-- 密码生成器主界面 -->
      <section class="generator-section">
        <div class="generator-card industrial-border">
          <!-- 生成的密码显示区域 -->
          <div class="password-display">
            <div class="password-output" id="password-output">
              <input type="text" id="generated-password" readonly placeholder="点击生成密码..." />
              <div class="password-actions">
                <button class="action-btn copy-btn" id="copy-password-btn" title="复制密码">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                  </svg>
                </button>
                <button class="action-btn refresh-btn" id="refresh-password-btn" title="重新生成">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                    <polyline points="23,4 23,10 17,10"></polyline>
                    <polyline points="1,20 1,14 7,14"></polyline>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- 密码强度指示器 -->
            <div class="password-strength" id="password-strength">
              <div class="strength-label">密码强度:</div>
              <div class="strength-bar">
                <div class="strength-fill" id="strength-fill"></div>
              </div>
              <div class="strength-text" id="strength-text">未生成</div>
            </div>
          </div>

          <!-- 密码配置选项 -->
          <div class="password-config">
            <div class="config-section">
              <h3 class="config-title">密码配置</h3>
              
              <!-- 密码长度 -->
              <div class="config-item">
                <label for="password-length" class="config-label">
                  密码长度: <span id="length-value">12</span>
                </label>
                <input type="range" id="password-length" min="4" max="128" value="12" class="length-slider" />
                <div class="length-marks">
                  <span>4</span>
                  <span>16</span>
                  <span>32</span>
                  <span>64</span>
                  <span>128</span>
                </div>
              </div>

              <!-- 字符类型选择 -->
              <div class="config-item">
                <div class="config-label">包含字符类型:</div>
                <div class="character-options">
                  <label class="option-item">
                    <input type="checkbox" id="include-lowercase" checked />
                    <span class="option-text">小写字母 (a-z)</span>
                    <span class="option-example">abcdefg</span>
                  </label>
                  
                  <label class="option-item">
                    <input type="checkbox" id="include-uppercase" checked />
                    <span class="option-text">大写字母 (A-Z)</span>
                    <span class="option-example">ABCDEFG</span>
                  </label>
                  
                  <label class="option-item">
                    <input type="checkbox" id="include-numbers" checked />
                    <span class="option-text">数字 (0-9)</span>
                    <span class="option-example">1234567</span>
                  </label>
                  
                  <label class="option-item">
                    <input type="checkbox" id="include-symbols" />
                    <span class="option-text">特殊符号</span>
                    <span class="option-example">!@#$%^&*</span>
                  </label>
                </div>
              </div>

              <!-- 高级选项 -->
              <div class="config-item">
                <div class="config-label">高级选项:</div>
                <div class="advanced-options">
                  <label class="option-item">
                    <input type="checkbox" id="exclude-ambiguous" />
                    <span class="option-text">排除易混淆字符</span>
                    <span class="option-example">0O1lI</span>
                  </label>
                  
                  <label class="option-item">
                    <input type="checkbox" id="no-repeat" />
                    <span class="option-text">不重复字符</span>
                    <span class="option-example">每个字符只出现一次</span>
                  </label>
                </div>
              </div>
            </div>

            <!-- 生成按钮 -->
            <div class="generate-section">
              <button class="generate-btn" id="generate-btn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                  <path d="M12 2L2 7v10c0 5.55 3.84 9.95 9 11 5.16-1.05 9-5.45 9-11V7l-10-5z"></path>
                  <path d="M9 12l2 2 4-4"></path>
                </svg>
                生成安全密码
              </button>
              
              <!-- 批量生成 -->
              <div class="batch-generate">
                <label for="batch-count" class="batch-label">批量生成:</label>
                <select id="batch-count" class="batch-select">
                  <option value="1">1个密码</option>
                  <option value="5">5个密码</option>
                  <option value="10">10个密码</option>
                  <option value="20">20个密码</option>
                </select>
              </div>
            </div>
          </div>

          <!-- 批量密码显示区域 -->
          <div class="batch-passwords hidden" id="batch-passwords">
            <h3 class="batch-title">生成的密码列表</h3>
            <div class="batch-list" id="batch-list"></div>
            <div class="batch-actions">
              <button class="batch-btn copy-all-btn" id="copy-all-btn">复制全部</button>
              <button class="batch-btn clear-btn" id="clear-batch-btn">清空列表</button>
            </div>
          </div>
        </div>
      </section>

      <!-- 安全提示 -->
      <section class="security-section">
        <div class="security-content industrial-border">
          <h2 class="security-title">密码安全建议</h2>
          <div class="security-grid">
            <div class="security-item">
              <div class="security-icon">🔒</div>
              <h3>使用强密码</h3>
              <p>密码长度至少12位，包含大小写字母、数字和特殊符号</p>
            </div>
            <div class="security-item">
              <div class="security-icon">🔄</div>
              <h3>定期更换</h3>
              <p>重要账户的密码应该定期更换，建议3-6个月更换一次</p>
            </div>
            <div class="security-item">
              <div class="security-icon">🚫</div>
              <h3>避免重复</h3>
              <p>不同账户使用不同密码，避免一个密码泄露影响多个账户</p>
            </div>
            <div class="security-item">
              <div class="security-icon">💾</div>
              <h3>安全存储</h3>
              <p>使用密码管理器安全存储密码，避免明文记录</p>
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>
</Layout>

<style>
  .main {
    min-height: calc(100vh - 80px);
    padding: 2rem 0;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .page-description {
    font-size: 1.125rem;
    color: var(--color-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
    font-family: var(--font-sans);
  }

  .generator-section {
    margin-bottom: 3rem;
  }

  .generator-card {
    background-color: var(--color-card);
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
  }

  /* 密码显示区域 */
  .password-display {
    margin-bottom: 2rem;
  }

  .password-output {
    position: relative;
    margin-bottom: 1rem;
  }

  #generated-password {
    width: 100%;
    padding: 1rem 4rem 1rem 1rem;
    font-family: var(--font-mono);
    font-size: 1.125rem;
    background-color: var(--color-code-bg);
    border: 2px solid var(--color-border);
    border-radius: 4px;
    color: var(--color-text);
    letter-spacing: 1px;
    outline: none;
  }

  #generated-password:focus {
    border-color: var(--color-accent);
  }

  .password-actions {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    gap: 0.25rem;
  }

  .action-btn {
    background: var(--color-card);
    border: 1px solid var(--color-border);
    color: var(--color-secondary);
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .action-btn:hover {
    color: var(--color-accent);
    background-color: var(--color-hover);
  }

  .action-btn.copied {
    color: #28a745;
    border-color: #28a745;
  }

  /* 密码强度指示器 */
  .password-strength {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
  }

  .strength-label {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-secondary);
    white-space: nowrap;
  }

  .strength-bar {
    flex: 1;
    height: 8px;
    background-color: var(--color-border);
    border-radius: 4px;
    overflow: hidden;
  }

  .strength-fill {
    height: 100%;
    width: 0%;
    transition: all 0.3s ease;
    border-radius: 4px;
  }

  .strength-text {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    white-space: nowrap;
  }

  /* 强度等级颜色 */
  .strength-very-weak { background-color: #dc3545; color: #dc3545; }
  .strength-weak { background-color: #fd7e14; color: #fd7e14; }
  .strength-medium { background-color: #ffc107; color: #ffc107; }
  .strength-strong { background-color: #28a745; color: #28a745; }
  .strength-very-strong { background-color: #20c997; color: #20c997; }

  /* 密码配置 */
  .password-config {
    border-top: 2px solid var(--color-border);
    padding-top: 2rem;
  }

  .config-section {
    margin-bottom: 2rem;
  }

  .config-title {
    font-family: var(--font-mono);
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .config-item {
    margin-bottom: 1.5rem;
  }

  .config-label {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-text);
    display: block;
  }

  /* 长度滑块 */
  .length-slider {
    width: 100%;
    margin: 0.5rem 0;
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    background: var(--color-border);
    border-radius: 3px;
    outline: none;
  }

  .length-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: var(--color-accent);
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid var(--color-bg);
  }

  .length-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: var(--color-accent);
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid var(--color-bg);
  }

  .length-marks {
    display: flex;
    justify-content: space-between;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-secondary);
    margin-top: 0.25rem;
  }

  /* 字符选项 */
  .character-options,
  .advanced-options {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .option-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .option-item:hover {
    background-color: var(--color-hover);
  }

  .option-item input[type="checkbox"] {
    width: 16px;
    height: 16px;
    accent-color: var(--color-accent);
  }

  .option-text {
    font-family: var(--font-mono);
    font-size: 0.85rem;
    font-weight: 500;
    color: var(--color-text);
    flex: 1;
  }

  .option-example {
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--color-secondary);
    background-color: var(--color-border);
    padding: 0.25rem 0.5rem;
    border-radius: 2px;
  }

  /* 生成按钮区域 */
  .generate-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .generate-btn {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background-color: var(--color-accent);
    color: var(--color-bg);
    border: 2px solid var(--color-accent);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .generate-btn:hover {
    background-color: var(--color-text);
    border-color: var(--color-text);
    transform: translateY(-1px);
  }

  .batch-generate {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .batch-label {
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-secondary);
  }

  .batch-select {
    padding: 0.5rem;
    background-color: var(--color-card);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-family: var(--font-mono);
    font-size: 0.8rem;
    color: var(--color-text);
  }

  /* 批量密码显示 */
  .batch-passwords {
    border-top: 2px solid var(--color-border);
    padding-top: 2rem;
    margin-top: 2rem;
  }

  .batch-title {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .batch-list {
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
    padding: 1rem;
    margin-bottom: 1rem;
    max-height: 300px;
    overflow-y: auto;
  }

  .batch-password-item {
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.5rem;
    border-bottom: 1px solid var(--color-border);
    color: var(--color-text);
    letter-spacing: 1px;
    word-break: break-all;
  }

  .batch-password-item:last-child {
    border-bottom: none;
  }

  .batch-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .batch-btn {
    padding: 0.75rem 1rem;
    background-color: var(--color-card);
    border: 2px solid var(--color-border);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;
  }

  .batch-btn:hover {
    background-color: var(--color-hover);
    border-color: var(--color-accent);
    color: var(--color-accent);
  }

  /* 安全提示 */
  .security-section {
    margin-bottom: 2rem;
  }

  .security-content {
    background-color: var(--color-card);
    padding: 2rem;
  }

  .security-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--color-accent);
  }

  .security-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .security-item {
    text-align: center;
    padding: 1rem;
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-border);
    border-radius: 4px;
  }

  .security-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .security-item h3 {
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .security-item p {
    color: var(--color-secondary);
    font-size: 0.85rem;
    line-height: 1.5;
    margin: 0;
    font-family: var(--font-sans);
  }

  .hidden {
    display: none !important;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .generator-card {
      padding: 1.5rem;
    }

    .password-actions {
      position: static;
      transform: none;
      margin-top: 0.5rem;
      justify-content: center;
    }

    #generated-password {
      padding: 1rem;
      font-size: 1rem;
    }

    .password-strength {
      flex-direction: column;
      align-items: stretch;
      gap: 0.5rem;
    }

    .character-options,
    .advanced-options {
      gap: 0.5rem;
    }

    .option-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .generate-section {
      gap: 0.75rem;
    }

    .batch-generate {
      flex-direction: column;
      gap: 0.5rem;
    }

    .batch-actions {
      flex-direction: column;
      gap: 0.5rem;
    }

    .security-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .security-content {
      padding: 1.5rem;
    }
  }
</style>

<script>
  // 密码生成器类
  class PasswordGenerator {
    constructor() {
      this.characters = {
        lowercase: 'abcdefghijklmnopqrstuvwxyz',
        uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        numbers: '0123456789',
        symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
      };
      
      this.ambiguousChars = '0O1lI';
      
      this.initElements();
      this.bindEvents();
      this.updateLengthDisplay();
    }

    initElements() {
      this.lengthSlider = document.getElementById('password-length');
      this.lengthValue = document.getElementById('length-value');
      this.generatedPassword = document.getElementById('generated-password');
      this.copyBtn = document.getElementById('copy-password-btn');
      this.refreshBtn = document.getElementById('refresh-password-btn');
      this.generateBtn = document.getElementById('generate-btn');
      this.strengthFill = document.getElementById('strength-fill');
      this.strengthText = document.getElementById('strength-text');
      
      this.includeLowercase = document.getElementById('include-lowercase');
      this.includeUppercase = document.getElementById('include-uppercase');
      this.includeNumbers = document.getElementById('include-numbers');
      this.includeSymbols = document.getElementById('include-symbols');
      this.excludeAmbiguous = document.getElementById('exclude-ambiguous');
      this.noRepeat = document.getElementById('no-repeat');
      
      this.batchCount = document.getElementById('batch-count');
      this.batchPasswords = document.getElementById('batch-passwords');
      this.batchList = document.getElementById('batch-list');
      this.copyAllBtn = document.getElementById('copy-all-btn');
      this.clearBatchBtn = document.getElementById('clear-batch-btn');
    }

    bindEvents() {
      this.lengthSlider.addEventListener('input', () => {
        this.updateLengthDisplay();
        this.generatePassword();
      });

      [this.includeLowercase, this.includeUppercase, this.includeNumbers, 
       this.includeSymbols, this.excludeAmbiguous, this.noRepeat].forEach(checkbox => {
        checkbox.addEventListener('change', () => {
          this.generatePassword();
        });
      });

      this.generateBtn.addEventListener('click', () => {
        this.generatePasswords();
      });

      this.refreshBtn.addEventListener('click', () => {
        this.generatePassword();
      });

      this.copyBtn.addEventListener('click', () => {
        this.copyPassword();
      });

      this.copyAllBtn.addEventListener('click', () => {
        this.copyAllPasswords();
      });

      this.clearBatchBtn.addEventListener('click', () => {
        this.clearBatchList();
      });

      // 初始生成一个密码
      this.generatePassword();
    }

    updateLengthDisplay() {
      this.lengthValue.textContent = this.lengthSlider.value;
    }

    getCharacterSet() {
      let charset = '';
      
      if (this.includeLowercase.checked) charset += this.characters.lowercase;
      if (this.includeUppercase.checked) charset += this.characters.uppercase;
      if (this.includeNumbers.checked) charset += this.characters.numbers;
      if (this.includeSymbols.checked) charset += this.characters.symbols;
      
      if (this.excludeAmbiguous.checked) {
        charset = charset.split('').filter(char => !this.ambiguousChars.includes(char)).join('');
      }
      
      return charset;
    }

    generateSinglePassword() {
      const length = parseInt(this.lengthSlider.value);
      const charset = this.getCharacterSet();
      
      if (!charset) {
        return '请至少选择一种字符类型';
      }
      
      let password = '';
      const usedChars = new Set();
      
      for (let i = 0; i < length; i++) {
        let char;
        let attempts = 0;
        
        do {
          char = charset[Math.floor(Math.random() * charset.length)];
          attempts++;
          
          // 避免无限循环
          if (attempts > 100) break;
          
        } while (this.noRepeat.checked && usedChars.has(char) && usedChars.size < charset.length);
        
        if (this.noRepeat.checked && usedChars.size >= charset.length) {
          break; // 无法生成更多不重复字符
        }
        
        password += char;
        if (this.noRepeat.checked) {
          usedChars.add(char);
        }
      }
      
      return password;
    }

    generatePassword() {
      const password = this.generateSinglePassword();
      this.generatedPassword.value = password;
      this.updatePasswordStrength(password);
    }

    generatePasswords() {
      const count = parseInt(this.batchCount.value);
      
      if (count === 1) {
        this.generatePassword();
        this.batchPasswords.classList.add('hidden');
      } else {
        const passwords = [];
        for (let i = 0; i < count; i++) {
          passwords.push(this.generateSinglePassword());
        }
        
        this.displayBatchPasswords(passwords);
        this.batchPasswords.classList.remove('hidden');
        
        // 同时更新主密码显示
        if (passwords.length > 0) {
          this.generatedPassword.value = passwords[0];
          this.updatePasswordStrength(passwords[0]);
        }
      }
    }

    displayBatchPasswords(passwords) {
      this.batchList.innerHTML = '';
      
      passwords.forEach((password, index) => {
        const item = document.createElement('div');
        item.className = 'batch-password-item';
        item.textContent = `${index + 1}. ${password}`;
        this.batchList.appendChild(item);
      });
    }

    updatePasswordStrength(password) {
      const strength = this.calculatePasswordStrength(password);
      
      // 更新强度条
      this.strengthFill.style.width = `${strength.percentage}%`;
      this.strengthFill.className = `strength-fill strength-${strength.level}`;
      
      // 更新强度文本
      this.strengthText.textContent = strength.text;
      this.strengthText.className = `strength-text strength-${strength.level}`;
    }

    calculatePasswordStrength(password) {
      if (!password || password.includes('请至少选择')) {
        return { level: 'very-weak', text: '未生成', percentage: 0 };
      }
      
      let score = 0;
      const length = password.length;
      
      // 长度评分
      if (length >= 8) score += 1;
      if (length >= 12) score += 1;
      if (length >= 16) score += 1;
      if (length >= 20) score += 1;
      
      // 字符类型评分
      if (/[a-z]/.test(password)) score += 1;
      if (/[A-Z]/.test(password)) score += 1;
      if (/[0-9]/.test(password)) score += 1;
      if (/[^a-zA-Z0-9]/.test(password)) score += 1;
      
      // 复杂度评分
      const uniqueChars = new Set(password).size;
      if (uniqueChars / length > 0.7) score += 1;
      
      // 确定强度等级
      if (score <= 2) {
        return { level: 'very-weak', text: '非常弱', percentage: 20 };
      } else if (score <= 4) {
        return { level: 'weak', text: '弱', percentage: 40 };
      } else if (score <= 6) {
        return { level: 'medium', text: '中等', percentage: 60 };
      } else if (score <= 8) {
        return { level: 'strong', text: '强', percentage: 80 };
      } else {
        return { level: 'very-strong', text: '非常强', percentage: 100 };
      }
    }

    async copyPassword() {
      const password = this.generatedPassword.value;
      
      if (!password || password.includes('请至少选择')) return;

      try {
        await navigator.clipboard.writeText(password);
        this.showCopyFeedback(this.copyBtn);
      } catch (error) {
        this.fallbackCopy(password, this.copyBtn);
      }
    }

    async copyAllPasswords() {
      const passwords = Array.from(this.batchList.children)
        .map(item => item.textContent.replace(/^\d+\.\s/, ''))
        .join('\n');
      
      if (!passwords) return;

      try {
        await navigator.clipboard.writeText(passwords);
        this.showCopyFeedback(this.copyAllBtn);
      } catch (error) {
        this.fallbackCopy(passwords, this.copyAllBtn);
      }
    }

    fallbackCopy(text, button) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      
      try {
        document.execCommand('copy');
        this.showCopyFeedback(button);
      } catch (error) {
        console.error('复制失败:', error);
      }
      
      document.body.removeChild(textArea);
    }

    showCopyFeedback(button) {
      const originalHTML = button.innerHTML;
      const originalClass = button.className;
      
      button.classList.add('copied');
      button.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <polyline points="20,6 9,17 4,12"></polyline>
        </svg>
      `;
      
      setTimeout(() => {
        button.classList.remove('copied');
        button.innerHTML = originalHTML;
      }, 2000);
    }

    clearBatchList() {
      this.batchList.innerHTML = '';
      this.batchPasswords.classList.add('hidden');
    }
  }

  // 页面加载完成后初始化
  document.addEventListener('DOMContentLoaded', () => {
    new PasswordGenerator();
  });
</script>