---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';

// 编程语言颜色映射函数
function getLanguageColor(language) {
  const colors = {
    'JavaScript': '#f1e05a',
    'TypeScript': '#2b7489',
    'Python': '#3572A5',
    'Java': '#b07219',
    'C++': '#f34b7d',
    'C': '#555555',
    'C#': '#239120',
    'PHP': '#4F5D95',
    'Ruby': '#701516',
    'Go': '#00ADD8',
    'Rust': '#dea584',
    'Swift': '#ffac45',
    'Kotlin': '#F18E33',
    'Dart': '#00B4AB',
    'HTML': '#e34c26',
    'CSS': '#1572B6',
    'Vue': '#2c3e50',
    'React': '#61DAFB',
    'Shell': '#89e051',
    'Dockerfile': '#384d54',
    'Makefile': '#427819'
  };
  return colors[language] || '#586069';
}

// 获取 GitHub pinned 项目数据
async function fetchPinnedProjects() {
  try {
    // 使用 GitHub GraphQL API 获取 pinned repositories
    const query = `
      query {
        user(login: "deluxebear") {
          pinnedItems(first: 6, types: [REPOSITORY]) {
            totalCount
            edges {
              node {
                ... on Repository {
                  name
                  description
                  url
                  homepageUrl
                  primaryLanguage {
                    name
                  }
                  stargazerCount
                  forkCount
                  updatedAt
                  repositoryTopics(first: 10) {
                    edges {
                      node {
                        topic {
                          name
                        }
                      }
                    }
                  }
                  isArchived
                }
              }
            }
          }
        }
      }
    `;

    const response = await fetch('https://api.github.com/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // 注意：在生产环境中，你需要使用环境变量来存储 GitHub token
        // 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
      },
      body: JSON.stringify({ query })
    });

    if (!response.ok) {
      // 如果 GraphQL API 失败，回退到 REST API 并手动选择一些项目
      console.warn('GraphQL API failed, falling back to REST API with manual selection');
      return await fetchFallbackProjects();
    }

    const data = await response.json();
    
    if (data.errors) {
      console.warn('GraphQL errors:', data.errors);
      return await fetchFallbackProjects();
    }

    return data.data.user.pinnedItems.edges.map(edge => {
      const repo = edge.node;
      return {
        name: repo.name,
        description: repo.description || '暂无描述',
        url: repo.url,
        homepage: repo.homepageUrl,
        language: repo.primaryLanguage?.name,
        stars: repo.stargazerCount,
        forks: repo.forkCount,
        updatedAt: new Date(repo.updatedAt),
        topics: repo.repositoryTopics.edges.map(edge => edge.node.topic.name),
        isArchived: repo.isArchived,
        isPinned: true
      };
    });
  } catch (error) {
    console.error('Failed to fetch pinned projects:', error);
    return await fetchFallbackProjects();
  }
}

// 备用方案：手动选择一些重要项目
async function fetchFallbackProjects() {
  try {
    const response = await fetch('https://api.github.com/users/deluxebear/repos?sort=updated&per_page=100');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    const repos = await response.json();
    
    // 手动选择一些重要的项目（可以根据 stars、forks 或项目名称来筛选）
    const importantProjects = repos
      .filter(repo => !repo.fork && !repo.archived)
      .sort((a, b) => b.stargazers_count - a.stargazers_count)
      .slice(0, 6) // 取前6个最受欢迎的项目
      .map(repo => ({
        name: repo.name,
        description: repo.description || '暂无描述',
        url: repo.html_url,
        homepage: repo.homepage,
        language: repo.language,
        stars: repo.stargazers_count,
        forks: repo.forks_count,
        updatedAt: new Date(repo.updated_at),
        topics: repo.topics || [],
        isArchived: repo.archived,
        isPinned: false // 标记为非 pinned（备用方案）
      }));

    return importantProjects;
  } catch (error) {
    console.error('Failed to fetch fallback projects:', error);
    return [];
  }
}

const projects = await fetchPinnedProjects();

// 获取所有使用的技术标签
const allTopics = [...new Set(projects.flatMap(p => p.topics))].sort();
---

<Layout title="精选项目 - 数字花园" description="探索我的精选开源项目和创意编程作品">
  <Header />
  
  <main class="main">
    <div class="container">
      <header class="page-header">
        <h1 class="page-title">精选项目</h1>
        <p class="page-description">
          这里展示了我在 GitHub 上精心挑选的 {projects.length} 个项目，代表了我的技术重点和创意方向
        </p>
        <div class="github-link">
          <a href="https://github.com/deluxebear" target="_blank" rel="noopener noreferrer" class="btn btn-primary">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            访问 GitHub
          </a>
        </div>
      </header>

      <!-- 技术标签过滤 -->
      {allTopics.length > 0 && (
        <section class="filter-section">
          <h2 class="filter-title">按技术筛选</h2>
          <div class="filter-tags">
            <button class="filter-tag active" data-filter="all">
              全部 ({projects.length})
            </button>
            {allTopics.map(topic => {
              const count = projects.filter(p => p.topics.includes(topic)).length;
              return (
                <button class="filter-tag" data-filter={topic}>
                  {topic} ({count})
                </button>
              );
            })}
          </div>
        </section>
      )}

      <!-- 项目网格 -->
      <section class="projects-section">
        {projects.length > 0 ? (
          <div class="projects-grid" id="projects-grid">
            {projects.map(project => (
              <article class={`project-card industrial-border ${project.isArchived ? 'archived' : ''} ${project.isPinned ? 'pinned' : 'featured'}`} data-topics={project.topics.join(',')}>
                <div class="project-header">
                  <h3 class="project-title">
                    <a href={project.url} target="_blank" rel="noopener noreferrer">
                      {project.name}
                    </a>
                  </h3>
                  <div class="project-badges">
                    {project.isPinned && (
                      <span class="pinned-badge">📌 PINNED</span>
                    )}
                    {!project.isPinned && (
                      <span class="featured-badge">⭐ FEATURED</span>
                    )}
                    {project.isArchived && (
                      <span class="archived-badge">已归档</span>
                    )}
                  </div>
                </div>
                
                <p class="project-description">{project.description}</p>
                
                <div class="project-meta">
                  {project.language && (
                    <div class="project-language">
                      <span class="language-dot" style={`background-color: ${getLanguageColor(project.language)}`}></span>
                      {project.language}
                    </div>
                  )}
                  
                  <div class="project-stats">
                    <span class="stat">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                        <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"></polygon>
                      </svg>
                      {project.stars}
                    </span>
                    <span class="stat">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                        <circle cx="12" cy="12" r="3"></circle>
                        <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"></path>
                      </svg>
                      {project.forks}
                    </span>
                  </div>
                </div>
                
                {project.topics.length > 0 && (
                  <div class="project-topics">
                    {project.topics.slice(0, 5).map(topic => (
                      <span class="topic-tag">{topic}</span>
                    ))}
                    {project.topics.length > 5 && (
                      <span class="topic-more">+{project.topics.length - 5}</span>
                    )}
                  </div>
                )}
                
                <div class="project-footer">
                  <div class="project-links">
                    <a href={project.url} target="_blank" rel="noopener noreferrer" class="project-link">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                        <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                      </svg>
                      源码
                    </a>
                    {project.homepage && (
                      <a href={project.homepage} target="_blank" rel="noopener noreferrer" class="project-link">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                          <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                          <polyline points="15,3 21,3 21,9"></polyline>
                          <line x1="10" y1="14" x2="21" y2="3"></line>
                        </svg>
                        演示
                      </a>
                    )}
                  </div>
                  <time class="project-updated" datetime={project.updatedAt.toISOString()}>
                    {project.updatedAt.toLocaleDateString('zh-CN', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric'
                    })}
                  </time>
                </div>
              </article>
            ))}
          </div>
        ) : (
          <div class="no-projects">
            <p>暂时没有精选项目展示</p>
            <a href="https://github.com/deluxebear" target="_blank" rel="noopener noreferrer" class="btn btn-primary">
              访问 GitHub 查看所有项目
            </a>
          </div>
        )}
        
        <div class="no-results hidden" id="no-results">
          <p>没有找到符合条件的项目</p>
        </div>
      </section>
    </div>
  </main>
</Layout>

<style>
  .main {
    min-height: calc(100vh - 80px);
    padding: 2rem 0;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 2px;
  }

  .page-description {
    font-size: 1.25rem;
    color: var(--color-secondary);
    max-width: 600px;
    margin: 0 auto 2rem;
    line-height: 1.6;
    font-family: var(--font-sans);
  }

  .github-link {
    margin-top: 1.5rem;
  }

  .github-link .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-section {
    margin-bottom: 3rem;
  }

  .filter-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .filter-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .filter-tag {
    background-color: var(--color-card);
    border: var(--border-width) var(--border-style) var(--color-border);
    color: var(--color-text);
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-family: var(--font-mono);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .filter-tag:hover {
    background-color: var(--color-hover);
    transform: translateY(-1px);
  }

  .filter-tag.active {
    background-color: var(--color-accent);
    color: var(--color-bg);
  }

  .projects-section {
    margin-bottom: 3rem;
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
  }

  .project-card {
    background-color: var(--color-card);
    padding: 1.5rem;
    transition: all 0.3s ease;
    height: fit-content;
    position: relative;
  }

  .project-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  .project-card.archived {
    opacity: 0.7;
    background-color: var(--color-code-bg);
  }

  .project-card.pinned {
    border-color: var(--color-accent);
    background: linear-gradient(135deg, var(--color-card) 0%, var(--color-hover) 100%);
  }

  .project-card.featured {
    border-color: var(--color-secondary);
  }

  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
    gap: 1rem;
  }

  .project-title {
    font-family: var(--font-mono);
    font-size: 1.25rem;
    font-weight: 700;
    margin: 0;
    text-transform: uppercase;
    letter-spacing: 1px;
    flex: 1;
  }

  .project-title a {
    color: var(--color-text);
    text-decoration: none;
  }

  .project-title a:hover {
    color: var(--color-accent);
  }

  .project-badges {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    align-items: flex-end;
  }

  .pinned-badge {
    background-color: var(--color-accent);
    color: var(--color-bg);
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-family: var(--font-mono);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap;
  }

  .featured-badge {
    background-color: var(--color-secondary);
    color: var(--color-bg);
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-family: var(--font-mono);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap;
  }

  .archived-badge {
    background-color: var(--color-muted);
    color: var(--color-bg);
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-family: var(--font-mono);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    white-space: nowrap;
  }

  .project-description {
    color: var(--color-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 1rem;
    font-family: var(--font-sans);
  }

  .project-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    gap: 1rem;
  }

  .project-language {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-family: var(--font-mono);
    font-weight: 500;
  }

  .language-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: var(--border-width) var(--border-style) var(--color-border);
  }

  .project-stats {
    display: flex;
    gap: 1rem;
  }

  .stat {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
    color: var(--color-secondary);
    font-family: var(--font-mono);
  }

  .project-topics {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .topic-tag {
    background-color: var(--color-code-bg);
    color: var(--color-accent);
    padding: 0.25rem 0.5rem;
    border: var(--border-width) var(--border-style) var(--color-border);
    font-size: 0.75rem;
    font-family: var(--font-mono);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .topic-more {
    color: var(--color-secondary);
    font-size: 0.75rem;
    font-family: var(--font-mono);
    font-weight: 500;
  }

  .project-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    padding-top: 1rem;
    border-top: var(--border-width) var(--border-style) var(--color-border);
  }

  .project-links {
    display: flex;
    gap: 1rem;
  }

  .project-link {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
    font-family: var(--font-mono);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: var(--color-accent);
    text-decoration: none;
  }

  .project-link:hover {
    color: var(--color-text);
  }

  .project-updated {
    font-size: 0.75rem;
    color: var(--color-secondary);
    font-family: var(--font-mono);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .no-projects,
  .no-results {
    text-align: center;
    padding: 3rem;
    color: var(--color-secondary);
    font-size: 1.125rem;
    font-family: var(--font-mono);
  }

  .no-projects .btn {
    margin-top: 1rem;
  }

  .no-results.hidden {
    display: none;
  }

  @media (max-width: 768px) {
    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .projects-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .filter-tags {
      gap: 0.5rem;
    }

    .filter-tag {
      font-size: 0.75rem;
      padding: 0.375rem 0.75rem;
    }

    .project-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .project-footer {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .project-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .project-badges {
      align-items: flex-start;
    }
  }
</style>

<script>
  // 项目过滤功能
  document.addEventListener('DOMContentLoaded', () => {
    const filterTags = document.querySelectorAll('.filter-tag');
    const projectsGrid = document.getElementById('projects-grid');
    const noResults = document.getElementById('no-results');
    
    if (!projectsGrid) return;
    
    const allProjects = Array.from(projectsGrid.children);
    
    filterTags.forEach(filter => {
      filter.addEventListener('click', () => {
        const selectedFilter = filter.getAttribute('data-filter');
        
        // 更新激活状态
        filterTags.forEach(f => f.classList.remove('active'));
        filter.classList.add('active');
        
        // 过滤项目
        let visibleProjects = 0;
        
        allProjects.forEach(project => {
          const projectTopics = project.getAttribute('data-topics') || '';
          
          if (selectedFilter === 'all') {
            project.style.display = 'block';
            visibleProjects++;
          } else {
            if (projectTopics.includes(selectedFilter)) {
              project.style.display = 'block';
              visibleProjects++;
            } else {
              project.style.display = 'none';
            }
          }
        });
        
        // 显示/隐藏无结果消息
        if (visibleProjects === 0) {
          noResults?.classList.remove('hidden');
        } else {
          noResults?.classList.add('hidden');
        }
      });
    });
  });
</script>